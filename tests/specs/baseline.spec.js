// these tests should represent the baseline tests for each constraint / feature
// only simple straightforward tests. always fix these first.
// the test can be auto-generated but should be hand-checked

// input domains to use for each var:
// - [0 0] [0 1] [1 0] [1 1]       (all the bools)
// - [0 10]                        (a simple non-bool range)
// - [0 0 10 10]                   (simple booly)
// - [1 10]                        (non-zero simple range that contains 1)
// - [1 1 10 10]                   (non-zero pair that contains 1)
// - [10 10]                       (non-boolean-ranged constant)
// - [3 13]                        (partial overlap with [0 10] etc
// - [0 500]                       (partial overlap with [100 1000]
// - [100 1000]                    (large range far out of bool range)
// - [100 100 1000 1000]           (large pair range)

import {verify} from 'fdv/verifier';

//function generate() {
//  let doms = [[0, 0], [0, 1], [1, 1], [0, 10], [0, 0, 10, 10], [1, 10], [1, 1, 10, 10], [10, 10], [3, 13], [0, 500], [100, 2000], [100, 100, 2000, 2000]];
//  return doms.map(a => {
//    return doms.map(b => (' '.repeat(6) + ('test([' + a + '],').padEnd(30, ' ') + (' [' + b + '],').padEnd(30, ' ')+' false);')).join('\n');
//  }).join('\n');
//}
//copy(generate())

describe('fdh/specs/baseline.spec', function() {

  const USE_NOLEAF_VARIATIONS = false;

  function run(dsl, vars, rejects) {
    let e = new Error();

    if (rejects !== undefined) rejects = 'reject';

    it(`<$!!${dsl}!!>` + (rejects ? ' (should reject)' : ''), function() {
      verify(dsl, rejects === undefined ? rejects : 'reject', {stack: e.stack});
    });

    if (USE_NOLEAF_VARIATIONS) {
      let dsl1 = dsl + '\n@custom noleaf ' + vars[0] + '\n';
      it(`<$!!${dsl1}!!>` + (rejects ? ' (should reject)' : ''), function() {
        verify(dsl1, rejects === undefined ? rejects : 'reject', {stack: e.stack});
      });

      let dsl2 = dsl + '\n@custom noleaf ' + vars[1] + '\n';
      it(`<$!!${dsl2}!!>` + (rejects ? ' (should reject)' : ''), function() {
        verify(dsl2, rejects === undefined ? rejects : 'reject', {stack: e.stack});
      });

      let dsl3 = dsl + '\n@custom noleaf ' + vars[0] + ' ' + vars[1] + '\n';
      it(`<$!!${dsl3}!!>` + (rejects ? ' (should reject)' : ''), function() {
        verify(dsl3, rejects === undefined ? rejects : 'reject', {stack: e.stack});
      });
    }
  }

  describe('all', function() {

    function test(A, B, reject) {
      // A must be nonzero, B must be nonzero
      run(`
        : A [${A}]
        : B [${B}]
        A & B
      `, ['A', 'B'], reject);
    }

    test([0, 0], [0, 0], 'reject');
    test([0, 0], [0, 1], 'reject');
    test([0, 0], [1, 1], 'reject');
    test([0, 0], [0, 10], 'reject');
    test([0, 0], [0, 0, 10, 10], 'reject');
    test([0, 0], [1, 10], 'reject');
    test([0, 0], [1, 1, 10, 10], 'reject');
    test([0, 0], [10, 10], 'reject');
    test([0, 0], [3, 13], 'reject');
    test([0, 0], [0, 500], 'reject');
    test([0, 0], [100, 2000], 'reject');
    test([0, 0], [100, 100, 2000, 2000], 'reject');
    test([0, 1], [0, 0], 'reject');
    test([0, 1], [0, 1]);
    test([0, 1], [1, 1]);
    test([0, 1], [0, 10]);
    test([0, 1], [0, 0, 10, 10]);
    test([0, 1], [1, 10]);
    test([0, 1], [1, 1, 10, 10]);
    test([0, 1], [10, 10]);
    test([0, 1], [3, 13]);
    test([0, 1], [0, 500]);
    test([0, 1], [100, 2000]);
    test([0, 1], [100, 100, 2000, 2000]);
    test([1, 1], [0, 0], 'reject');
    test([1, 1], [0, 1]);
    test([1, 1], [1, 1]);
    test([1, 1], [0, 10]);
    test([1, 1], [0, 0, 10, 10]);
    test([1, 1], [1, 10]);
    test([1, 1], [1, 1, 10, 10]);
    test([1, 1], [10, 10]);
    test([1, 1], [3, 13]);
    test([1, 1], [0, 500]);
    test([1, 1], [100, 2000]);
    test([1, 1], [100, 100, 2000, 2000]);
    test([0, 10], [0, 0], 'reject');
    test([0, 10], [0, 1]);
    test([0, 10], [1, 1]);
    test([0, 10], [0, 10]);
    test([0, 10], [0, 0, 10, 10]);
    test([0, 10], [1, 10]);
    test([0, 10], [1, 1, 10, 10]);
    test([0, 10], [10, 10]);
    test([0, 10], [3, 13]);
    test([0, 10], [0, 500]);
    test([0, 10], [100, 2000]);
    test([0, 10], [100, 100, 2000, 2000]);
    test([0, 0, 10, 10], [0, 0], 'reject');
    test([0, 0, 10, 10], [0, 1]);
    test([0, 0, 10, 10], [1, 1]);
    test([0, 0, 10, 10], [0, 10]);
    test([0, 0, 10, 10], [0, 0, 10, 10]);
    test([0, 0, 10, 10], [1, 10]);
    test([0, 0, 10, 10], [1, 1, 10, 10]);
    test([0, 0, 10, 10], [10, 10]);
    test([0, 0, 10, 10], [3, 13]);
    test([0, 0, 10, 10], [0, 500]);
    test([0, 0, 10, 10], [100, 2000]);
    test([0, 0, 10, 10], [100, 100, 2000, 2000]);
    test([1, 10], [0, 0], 'reject');
    test([1, 10], [0, 1]);
    test([1, 10], [1, 1]);
    test([1, 10], [0, 10]);
    test([1, 10], [0, 0, 10, 10]);
    test([1, 10], [1, 10]);
    test([1, 10], [1, 1, 10, 10]);
    test([1, 10], [10, 10]);
    test([1, 10], [3, 13]);
    test([1, 10], [0, 500]);
    test([1, 10], [100, 2000]);
    test([1, 10], [100, 100, 2000, 2000]);
    test([1, 1, 10, 10], [0, 0], 'reject');
    test([1, 1, 10, 10], [0, 1]);
    test([1, 1, 10, 10], [1, 1]);
    test([1, 1, 10, 10], [0, 10]);
    test([1, 1, 10, 10], [0, 0, 10, 10]);
    test([1, 1, 10, 10], [1, 10]);
    test([1, 1, 10, 10], [1, 1, 10, 10]);
    test([1, 1, 10, 10], [10, 10]);
    test([1, 1, 10, 10], [3, 13]);
    test([1, 1, 10, 10], [0, 500]);
    test([1, 1, 10, 10], [100, 2000]);
    test([1, 1, 10, 10], [100, 100, 2000, 2000]);
    test([10, 10], [0, 0], 'reject');
    test([10, 10], [0, 1]);
    test([10, 10], [1, 1]);
    test([10, 10], [0, 10]);
    test([10, 10], [0, 0, 10, 10]);
    test([10, 10], [1, 10]);
    test([10, 10], [1, 1, 10, 10]);
    test([10, 10], [10, 10]);
    test([10, 10], [3, 13]);
    test([10, 10], [0, 500]);
    test([10, 10], [100, 2000]);
    test([10, 10], [100, 100, 2000, 2000]);
    test([3, 13], [0, 0], 'reject');
    test([3, 13], [0, 1]);
    test([3, 13], [1, 1]);
    test([3, 13], [0, 10]);
    test([3, 13], [0, 0, 10, 10]);
    test([3, 13], [1, 10]);
    test([3, 13], [1, 1, 10, 10]);
    test([3, 13], [10, 10]);
    test([3, 13], [3, 13]);
    test([3, 13], [0, 500]);
    test([3, 13], [100, 2000]);
    test([3, 13], [100, 100, 2000, 2000]);
    test([0, 500], [0, 0], 'reject');
    test([0, 500], [0, 1]);
    test([0, 500], [1, 1]);
    test([0, 500], [0, 10]);
    test([0, 500], [0, 0, 10, 10]);
    test([0, 500], [1, 10]);
    test([0, 500], [1, 1, 10, 10]);
    test([0, 500], [10, 10]);
    test([0, 500], [3, 13]);
    test([0, 500], [0, 500]);
    test([0, 500], [100, 2000]);
    test([0, 500], [100, 100, 2000, 2000]);
    test([100, 2000], [0, 0], 'reject');
    test([100, 2000], [0, 1]);
    test([100, 2000], [1, 1]);
    test([100, 2000], [0, 10]);
    test([100, 2000], [0, 0, 10, 10]);
    test([100, 2000], [1, 10]);
    test([100, 2000], [1, 1, 10, 10]);
    test([100, 2000], [10, 10]);
    test([100, 2000], [3, 13]);
    test([100, 2000], [0, 500]);
    test([100, 2000], [100, 2000]);
    test([100, 2000], [100, 100, 2000, 2000]);
    test([100, 100, 2000, 2000], [0, 0], 'reject');
    test([100, 100, 2000, 2000], [0, 1]);
    test([100, 100, 2000, 2000], [1, 1]);
    test([100, 100, 2000, 2000], [0, 10]);
    test([100, 100, 2000, 2000], [0, 0, 10, 10]);
    test([100, 100, 2000, 2000], [1, 10]);
    test([100, 100, 2000, 2000], [1, 1, 10, 10]);
    test([100, 100, 2000, 2000], [10, 10]);
    test([100, 100, 2000, 2000], [3, 13]);
    test([100, 100, 2000, 2000], [0, 500]);
    test([100, 100, 2000, 2000], [100, 2000]);
    test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
  });

  describe('diff', function() {


    function test(A, B, rejects) {
      run(`
        : A [${A}]
        : B [${B}]
        A != B
      `, ['A', 'B'], rejects);
    }

    test([0, 0], [0, 0], false);
    test([0, 0], [0, 1]);
    test([0, 0], [1, 1]);
    test([0, 0], [0, 10]);
    test([0, 0], [0, 0, 10, 10]);
    test([0, 0], [1, 10]);
    test([0, 0], [1, 1, 10, 10]);
    test([0, 0], [10, 10]);
    test([0, 0], [3, 13]);
    test([0, 0], [0, 500]);
    test([0, 0], [100, 2000]);
    test([0, 0], [100, 100, 2000, 2000]);
    test([0, 1], [0, 0]);
    test([0, 1], [0, 1]);
    test([0, 1], [1, 1]);
    test([0, 1], [0, 10]);
    test([0, 1], [0, 0, 10, 10]);
    test([0, 1], [1, 10]);
    test([0, 1], [1, 1, 10, 10]);
    test([0, 1], [10, 10]);
    test([0, 1], [3, 13]);
    test([0, 1], [0, 500]);
    test([0, 1], [100, 2000]);
    test([0, 1], [100, 100, 2000, 2000]);
    test([1, 1], [0, 0]);
    test([1, 1], [0, 1]);
    test([1, 1], [1, 1], false);
    test([1, 1], [0, 10]);
    test([1, 1], [0, 0, 10, 10]);
    test([1, 1], [1, 10]);
    test([1, 1], [1, 1, 10, 10]);
    test([1, 1], [10, 10]);
    test([1, 1], [3, 13]);
    test([1, 1], [0, 500]);
    test([1, 1], [100, 2000]);
    test([1, 1], [100, 100, 2000, 2000]);
    test([0, 10], [0, 0]);
    test([0, 10], [0, 1]);
    test([0, 10], [1, 1]);
    test([0, 10], [0, 10]);
    test([0, 10], [0, 0, 10, 10]);
    test([0, 10], [1, 10]);
    test([0, 10], [1, 1, 10, 10]);
    test([0, 10], [10, 10]);
    test([0, 10], [3, 13]);
    test([0, 10], [0, 500]);
    test([0, 10], [100, 2000]);
    test([0, 10], [100, 100, 2000, 2000]);
    test([0, 0, 10, 10], [0, 0]);
    test([0, 0, 10, 10], [0, 1]);
    test([0, 0, 10, 10], [1, 1]);
    test([0, 0, 10, 10], [0, 10]);
    test([0, 0, 10, 10], [0, 0, 10, 10]);
    test([0, 0, 10, 10], [1, 10]);
    test([0, 0, 10, 10], [1, 1, 10, 10]);
    test([0, 0, 10, 10], [10, 10]);
    test([0, 0, 10, 10], [3, 13]);
    test([0, 0, 10, 10], [0, 500]);
    test([0, 0, 10, 10], [100, 2000]);
    test([0, 0, 10, 10], [100, 100, 2000, 2000]);
    test([1, 10], [0, 0]);
    test([1, 10], [0, 1]);
    test([1, 10], [1, 1]);
    test([1, 10], [0, 10]);
    test([1, 10], [0, 0, 10, 10]);
    test([1, 10], [1, 10]);
    test([1, 10], [1, 1, 10, 10]);
    test([1, 10], [10, 10]);
    test([1, 10], [3, 13]);
    test([1, 10], [0, 500]);
    test([1, 10], [100, 2000]);
    test([1, 10], [100, 100, 2000, 2000]);
    test([1, 1, 10, 10], [0, 0]);
    test([1, 1, 10, 10], [0, 1]);
    test([1, 1, 10, 10], [1, 1]);
    test([1, 1, 10, 10], [0, 10]);
    test([1, 1, 10, 10], [0, 0, 10, 10]);
    test([1, 1, 10, 10], [1, 10]);
    test([1, 1, 10, 10], [1, 1, 10, 10]);
    test([1, 1, 10, 10], [10, 10]);
    test([1, 1, 10, 10], [3, 13]);
    test([1, 1, 10, 10], [0, 500]);
    test([1, 1, 10, 10], [100, 2000]);
    test([1, 1, 10, 10], [100, 100, 2000, 2000]);
    test([10, 10], [0, 0]);
    test([10, 10], [0, 1]);
    test([10, 10], [1, 1]);
    test([10, 10], [0, 10]);
    test([10, 10], [0, 0, 10, 10]);
    test([10, 10], [1, 10]);
    test([10, 10], [1, 1, 10, 10]);
    test([10, 10], [10, 10], false);
    test([10, 10], [3, 13]);
    test([10, 10], [0, 500]);
    test([10, 10], [100, 2000]);
    test([10, 10], [100, 100, 2000, 2000]);
    test([3, 13], [0, 0]);
    test([3, 13], [0, 1]);
    test([3, 13], [1, 1]);
    test([3, 13], [0, 10]);
    test([3, 13], [0, 0, 10, 10]);
    test([3, 13], [1, 10]);
    test([3, 13], [1, 1, 10, 10]);
    test([3, 13], [10, 10]);
    test([3, 13], [3, 13]);
    test([3, 13], [0, 500]);
    test([3, 13], [100, 2000]);
    test([3, 13], [100, 100, 2000, 2000]);
    test([0, 500], [0, 0]);
    test([0, 500], [0, 1]);
    test([0, 500], [1, 1]);
    test([0, 500], [0, 10]);
    test([0, 500], [0, 0, 10, 10]);
    test([0, 500], [1, 10]);
    test([0, 500], [1, 1, 10, 10]);
    test([0, 500], [10, 10]);
    test([0, 500], [3, 13]);
    test([0, 500], [0, 500]);
    test([0, 500], [100, 2000]);
    test([0, 500], [100, 100, 2000, 2000]);
    test([100, 2000], [0, 0]);
    test([100, 2000], [0, 1]);
    test([100, 2000], [1, 1]);
    test([100, 2000], [0, 10]);
    test([100, 2000], [0, 0, 10, 10]);
    test([100, 2000], [1, 10]);
    test([100, 2000], [1, 1, 10, 10]);
    test([100, 2000], [10, 10]);
    test([100, 2000], [3, 13]);
    test([100, 2000], [0, 500]);
    test([100, 2000], [100, 2000]);
    test([100, 2000], [100, 100, 2000, 2000]);
    test([100, 100, 2000, 2000], [0, 0]);
    test([100, 100, 2000, 2000], [0, 1]);
    test([100, 100, 2000, 2000], [1, 1]);
    test([100, 100, 2000, 2000], [0, 10]);
    test([100, 100, 2000, 2000], [0, 0, 10, 10]);
    test([100, 100, 2000, 2000], [1, 10]);
    test([100, 100, 2000, 2000], [1, 1, 10, 10]);
    test([100, 100, 2000, 2000], [10, 10]);
    test([100, 100, 2000, 2000], [3, 13]);
    test([100, 100, 2000, 2000], [0, 500]);
    test([100, 100, 2000, 2000], [100, 2000]);
    test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
  });

  describe('div', function() {

    describe('R=0', function() {

      function test(A, B, rejects) {

        run(`
          : A [${A}]
          : B [${B}]
          : R [0 0]
          R = A / B
      `, ['A', 'B', 'R'], rejects);
      }

      test([0, 0], [0, 0], 'reject');
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0], 'reject');
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0], 'reject');
      test([1, 1], [0, 1], 'reject');
      test([1, 1], [1, 1], 'reject');
      test([1, 1], [0, 10], 'reject');
      test([1, 1], [0, 0, 10, 10]); // result is floored so it doesnt reject
      test([1, 1], [1, 10], 'reject');
      test([1, 1], [1, 1, 10, 10]); // result is floored so it doesnt reject
      test([1, 1], [10, 10]); // result is floored so it doesnt reject
      test([1, 1], [3, 13]); // result is floored so it doesnt reject
      test([1, 1], [0, 500], 'reject');
      test([1, 1], [100, 2000]); // result is floored so it doesnt reject
      test([1, 1], [100, 100, 2000, 2000]); // result is floored so it doesnt reject
      test([0, 10], [0, 0], 'reject');
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0], 'reject');
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0], 'reject');
      test([1, 10], [0, 1], 'reject');
      test([1, 10], [1, 1], 'reject');
      test([1, 10], [0, 10], 'reject');
      test([1, 10], [0, 0, 10, 10], 'reject');
      test([1, 10], [1, 10], 'reject');
      test([1, 10], [1, 1, 10, 10], 'reject');
      test([1, 10], [10, 10], 'reject');
      test([1, 10], [3, 13], 'reject');
      test([1, 10], [0, 500], 'reject');
      test([1, 10], [100, 2000]); // result is floored so it doesnt reject
      test([1, 10], [100, 100, 2000, 2000]); // result is floored so it doesnt reject
      test([1, 1, 10, 10], [0, 0], 'reject');
      test([1, 1, 10, 10], [0, 1], 'reject');
      test([1, 1, 10, 10], [1, 1], 'reject');
      test([1, 1, 10, 10], [0, 10], 'reject');
      test([1, 1, 10, 10], [0, 0, 10, 10]); // result is floored so it doesnt reject
      test([1, 1, 10, 10], [1, 10], 'reject');
      test([1, 1, 10, 10], [1, 1, 10, 10]); // result is floored so it doesnt reject
      test([1, 1, 10, 10], [10, 10]); // result is floored so it doesnt reject
      test([1, 1, 10, 10], [3, 13]); // result is floored so it doesnt reject
      test([1, 1, 10, 10], [0, 500], 'reject');
      test([1, 1, 10, 10], [100, 2000]); // result is floored so it doesnt reject
      test([1, 1, 10, 10], [100, 100, 2000, 2000]); // result is floored so it doesnt reject
      test([10, 10], [0, 0], 'reject');
      test([10, 10], [0, 1], 'reject');
      test([10, 10], [1, 1], 'reject');
      test([10, 10], [0, 10], 'reject');
      test([10, 10], [0, 0, 10, 10], 'reject');
      test([10, 10], [1, 10], 'reject');
      test([10, 10], [1, 1, 10, 10], 'reject');
      test([10, 10], [10, 10], 'reject');
      test([10, 10], [3, 13], 'reject');
      test([10, 10], [0, 500], 'reject');
      test([10, 10], [100, 2000]); // result is floored so it doesnt reject
      test([10, 10], [100, 100, 2000, 2000]); // result is floored so it doesnt reject
      test([3, 13], [0, 0], 'reject');
      test([3, 13], [0, 1], 'reject');
      test([3, 13], [1, 1], 'reject');
      test([3, 13], [0, 10], 'reject');
      test([3, 13], [0, 0, 10, 10], 'reject');
      test([3, 13], [1, 10], 'reject');
      test([3, 13], [1, 1, 10, 10], 'reject');
      test([3, 13], [10, 10], 'reject');
      test([3, 13], [3, 13], 'reject');
      test([3, 13], [0, 500], 'reject');
      test([3, 13], [100, 2000]); // result is floored so it doesnt reject
      test([3, 13], [100, 100, 2000, 2000]); // result is floored so it doesnt reject
      test([0, 500], [0, 0], 'reject');
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      //test([0,500],                  [0,500],                      {A: 0, B: 1});
      //test([0,500],                  [100,2000],                   {A: 0, B: 100});
      //test([0,500],                  [100,100,2000,2000],          {A: 0, B: 100});
      test([100, 2000], [0, 0], 'reject');
      test([100, 2000], [0, 1], 'reject');
      test([100, 2000], [1, 1], 'reject');
      test([100, 2000], [0, 10], 'reject');
      test([100, 2000], [0, 0, 10, 10], 'reject');
      test([100, 2000], [1, 10], 'reject');
      test([100, 2000], [1, 1, 10, 10], 'reject');
      test([100, 2000], [10, 10], 'reject');
      test([100, 2000], [3, 13], 'reject');
      //test([100,2000],               [0,500],                      'reject');
      //test([100,2000],               [100,2000],                   'reject');
      //test([100,2000],               [100,100,2000,2000],          'reject');
      test([100, 100, 2000, 2000], [0, 0], 'reject');
      test([100, 100, 2000, 2000], [0, 1], 'reject');
      test([100, 100, 2000, 2000], [1, 1], 'reject');
      test([100, 100, 2000, 2000], [0, 10], 'reject');
      test([100, 100, 2000, 2000], [0, 0, 10, 10], 'reject');
      test([100, 100, 2000, 2000], [1, 10], 'reject');
      test([100, 100, 2000, 2000], [1, 1, 10, 10], 'reject');
      test([100, 100, 2000, 2000], [10, 10], 'reject');
      test([100, 100, 2000, 2000], [3, 13], 'reject');
      //test([100,100,2000,2000],      [0,500],                      'reject');
      //test([100,100,2000,2000],      [100,2000],                   'reject');
      //test([100,100,2000,2000],      [100,100,2000,2000],          'reject');
    });

    describe('R=1', function() {


      function test(A, B, rejects) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [1 1]
          R = A / B
        `;

        run(dsl, ['A', 'B', 'R'], rejects);
      }

      test([0, 0], [0, 0], false);
      test([0, 0], [0, 1], false);
      test([0, 0], [1, 1], false);
      test([0, 0], [0, 10], false);
      test([0, 0], [0, 0, 10, 10], false);
      test([0, 0], [1, 10], false);
      test([0, 0], [1, 1, 10, 10], false);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500], false);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0], false);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10], false);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10], false);
      test([0, 1], [3, 13], false);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000], false);
      test([0, 1], [100, 100, 2000, 2000], false);
      test([1, 1], [0, 0], false);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10], false);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0], false);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000], false);
      test([0, 10], [100, 100, 2000, 2000], false);
      test([0, 0, 10, 10], [0, 0], false);
      test([0, 0, 10, 10], [0, 1], false);
      test([0, 0, 10, 10], [1, 1], false);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000], false);
      test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
      test([1, 10], [0, 0], false);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0], false);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1], false);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1], false);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0], false);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      //test([0,500],                  [0,500],                      {A: 1, B: 1});
      //test([0,500],                  [100,2000],                   {A: 100, B: 100});
      //test([0,500],                  [100,100,2000,2000],          {A: 100, B: 100});
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1], false);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10], false);
      test([100, 2000], [0, 0, 10, 10], false);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      //test([100,2000],               [0,500],                      {A: 100, B: 100});
      //test([100,2000],               [100,2000],                   {A: 100, B: 100});
      //test([100,2000],               [100,100,2000,2000],          {A: 100, B: 100});
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1], false);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10], false);
      test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      //test([100,100,2000,2000],      [0,500],                      {A: 100, B: 100});
      //test([100,100,2000,2000],      [100,2000],                   {A: 100, B: 100});
      //test([100,100,2000,2000],      [100,100,2000,2000],          {A: 100, B: 100});
    });

    describe('R=[01]', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 1]
          R = A / B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0], false);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0], false);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0], false);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]); // result is floored so it doesnt reject
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]); // result is floored so it doesnt reject
      test([1, 1], [3, 13]); // result is floored so it doesnt reject
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]); // result is floored so it doesnt reject
      test([1, 1], [100, 100, 2000, 2000]); // result is floored so it doesnt reject
      test([0, 10], [0, 0], false);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0], false);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0], false);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]); // result is floored so it doesnt reject
      test([1, 10], [100, 100, 2000, 2000]); // result is floored so it doesnt reject
      test([1, 1, 10, 10], [0, 0], false);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]); // result is floored so it doesnt reject
      test([1, 1, 10, 10], [100, 100, 2000, 2000]); // result is floored so it doesnt reject
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1], false);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]); // result is floored so it doesnt reject
      test([10, 10], [100, 100, 2000, 2000]); // result is floored so it doesnt reject
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1], false);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]); // result is floored so it doesnt reject
      test([3, 13], [100, 100, 2000, 2000]); // result is floored so it doesnt reject
      test([0, 500], [0, 0], false);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      //test([0,500],                  [0,500],                      {R: 0, A: 0, B: 1});
      //test([0,500],                  [100,2000],                   {R: 0, A: 0, B: 100});
      //test([0,500],                  [100,100,2000,2000],          {R: 0, A: 0, B: 100});
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1], false);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10], false);
      test([100, 2000], [0, 0, 10, 10], false);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      //test([100,2000],               [0,500],                      {R: 1, A: 100, B: 100});
      //test([100,2000],               [100,2000],                   {R: 1, A: 100, B: 100});
      //test([100,2000],               [100,100,2000,2000],          {R: 1, A: 100, B: 100});
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1], false);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10], false);
      test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      //test([100,100,2000,2000],      [0,500],                      {R: 1, A: 100, B: 100});
      //test([100,100,2000,2000],      [100,2000],                   {R: 1, A: 100, B: 100});
      //test([100,100,2000,2000],      [100,100,2000,2000],          {R: 1, A: 100, B: 100});
    });
  });

  describe('imp', function() {


    function test(A, B, out) {
      // if A is zero, B can be anything. if A is nonzero, B must be nonzero
      let dsl = `
        : A [${A}]
        : B [${B}]
        A -> B
      `;
      run(dsl, ['A', 'B'], out);
    }

    test([0, 0], [0, 0]);
    test([0, 0], [0, 1]);
    test([0, 0], [1, 1]);
    test([0, 0], [0, 10]);
    test([0, 0], [0, 0, 10, 10]);
    test([0, 0], [1, 10]);
    test([0, 0], [1, 1, 10, 10]);
    test([0, 0], [10, 10]);
    test([0, 0], [3, 13]);
    test([0, 0], [0, 500]);
    test([0, 0], [100, 2000]);
    test([0, 0], [100, 100, 2000, 2000]);
    test([0, 1], [0, 0]);
    test([0, 1], [0, 1]);
    test([0, 1], [1, 1]);
    test([0, 1], [0, 10]);
    test([0, 1], [0, 0, 10, 10]);
    test([0, 1], [1, 10]);
    test([0, 1], [1, 1, 10, 10]);
    test([0, 1], [10, 10]);
    test([0, 1], [3, 13]);
    test([0, 1], [0, 500]);
    test([0, 1], [100, 2000]);
    test([0, 1], [100, 100, 2000, 2000]);
    test([1, 1], [0, 0], false);
    test([1, 1], [0, 1]);
    test([1, 1], [1, 1]);
    test([1, 1], [0, 10]);
    test([1, 1], [0, 0, 10, 10]);
    test([1, 1], [1, 10]);
    test([1, 1], [1, 1, 10, 10]);
    test([1, 1], [10, 10]);
    test([1, 1], [3, 13]);
    test([1, 1], [0, 500]);
    test([1, 1], [100, 2000]);
    test([1, 1], [100, 100, 2000, 2000]);
    test([0, 10], [0, 0]);
    test([0, 10], [0, 1]);
    test([0, 10], [1, 1]);
    test([0, 10], [0, 10]);
    test([0, 10], [0, 0, 10, 10]);
    test([0, 10], [1, 10]);
    test([0, 10], [1, 1, 10, 10]);
    test([0, 10], [10, 10]);
    test([0, 10], [3, 13]);
    test([0, 10], [0, 500]);
    test([0, 10], [100, 2000]);
    test([0, 10], [100, 100, 2000, 2000]);
    test([0, 0, 10, 10], [0, 0]);
    test([0, 0, 10, 10], [0, 1]);
    test([0, 0, 10, 10], [1, 1]);
    test([0, 0, 10, 10], [0, 10]);
    test([0, 0, 10, 10], [0, 0, 10, 10]);
    test([0, 0, 10, 10], [1, 10]);
    test([0, 0, 10, 10], [1, 1, 10, 10]);
    test([0, 0, 10, 10], [10, 10]);
    test([0, 0, 10, 10], [3, 13]);
    test([0, 0, 10, 10], [0, 500]);
    test([0, 0, 10, 10], [100, 2000]);
    test([0, 0, 10, 10], [100, 100, 2000, 2000]);
    test([1, 10], [0, 0], false);
    test([1, 10], [0, 1]);
    test([1, 10], [1, 1]);
    test([1, 10], [0, 10]);
    test([1, 10], [0, 0, 10, 10]);
    test([1, 10], [1, 10]);
    test([1, 10], [1, 1, 10, 10]);
    test([1, 10], [10, 10]);
    test([1, 10], [3, 13]);
    test([1, 10], [0, 500]);
    test([1, 10], [100, 2000]);
    test([1, 10], [100, 100, 2000, 2000]);
    test([1, 1, 10, 10], [0, 0], false);
    test([1, 1, 10, 10], [0, 1]);
    test([1, 1, 10, 10], [1, 1]);
    test([1, 1, 10, 10], [0, 10]);
    test([1, 1, 10, 10], [0, 0, 10, 10]);
    test([1, 1, 10, 10], [1, 10]);
    test([1, 1, 10, 10], [1, 1, 10, 10]);
    test([1, 1, 10, 10], [10, 10]);
    test([1, 1, 10, 10], [3, 13]);
    test([1, 1, 10, 10], [0, 500]);
    test([1, 1, 10, 10], [100, 2000]);
    test([1, 1, 10, 10], [100, 100, 2000, 2000]);
    test([10, 10], [0, 0], false);
    test([10, 10], [0, 1]);
    test([10, 10], [1, 1]);
    test([10, 10], [0, 10]);
    test([10, 10], [0, 0, 10, 10]);
    test([10, 10], [1, 10]);
    test([10, 10], [1, 1, 10, 10]);
    test([10, 10], [10, 10]);
    test([10, 10], [3, 13]);
    test([10, 10], [0, 500]);
    test([10, 10], [100, 2000]);
    test([10, 10], [100, 100, 2000, 2000]);
    test([3, 13], [0, 0], false);
    test([3, 13], [0, 1]);
    test([3, 13], [1, 1]);
    test([3, 13], [0, 10]);
    test([3, 13], [0, 0, 10, 10]);
    test([3, 13], [1, 10]);
    test([3, 13], [1, 1, 10, 10]);
    test([3, 13], [10, 10]);
    test([3, 13], [3, 13]);
    test([3, 13], [0, 500]);
    test([3, 13], [100, 2000]);
    test([3, 13], [100, 100, 2000, 2000]);
    test([0, 500], [0, 0]);
    test([0, 500], [0, 1]);
    test([0, 500], [1, 1]);
    test([0, 500], [0, 10]);
    test([0, 500], [0, 0, 10, 10]);
    test([0, 500], [1, 10]);
    test([0, 500], [1, 1, 10, 10]);
    test([0, 500], [10, 10]);
    test([0, 500], [3, 13]);
    test([0, 500], [0, 500]);
    test([0, 500], [100, 2000]);
    test([0, 500], [100, 100, 2000, 2000]);
    test([100, 2000], [0, 0], false);
    test([100, 2000], [0, 1]);
    test([100, 2000], [1, 1]);
    test([100, 2000], [0, 10]);
    test([100, 2000], [0, 0, 10, 10]);
    test([100, 2000], [1, 10]);
    test([100, 2000], [1, 1, 10, 10]);
    test([100, 2000], [10, 10]);
    test([100, 2000], [3, 13]);
    test([100, 2000], [0, 500]);
    test([100, 2000], [100, 2000]);
    test([100, 2000], [100, 100, 2000, 2000]);
    test([100, 100, 2000, 2000], [0, 0], false);
    test([100, 100, 2000, 2000], [0, 1]);
    test([100, 100, 2000, 2000], [1, 1]);
    test([100, 100, 2000, 2000], [0, 10]);
    test([100, 100, 2000, 2000], [0, 0, 10, 10]);
    test([100, 100, 2000, 2000], [1, 10]);
    test([100, 100, 2000, 2000], [1, 1, 10, 10]);
    test([100, 100, 2000, 2000], [10, 10]);
    test([100, 100, 2000, 2000], [3, 13]);
    test([100, 100, 2000, 2000], [0, 500]);
    test([100, 100, 2000, 2000], [100, 2000]);
    test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
  });

  describe('isall', function() {

    describe('R=0', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 0]
          R = all?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1], false);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10], false);
      test([1, 1], [1, 1, 10, 10], false);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1], false);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10], false);
      test([1, 10], [1, 1, 10, 10], false);
      test([1, 10], [10, 10], false);
      test([1, 10], [3, 13], false);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1], false);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10], false);
      test([1, 1, 10, 10], [1, 1, 10, 10], false);
      test([1, 1, 10, 10], [10, 10], false);
      test([1, 1, 10, 10], [3, 13], false);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10], false);
      test([10, 10], [1, 1, 10, 10], false);
      test([10, 10], [10, 10], false);
      test([10, 10], [3, 13], false);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10], false);
      test([3, 13], [1, 1, 10, 10], false);
      test([3, 13], [10, 10], false);
      test([3, 13], [3, 13], false);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000], false);
      test([100, 2000], [100, 100, 2000, 2000], false);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000], false);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000], false);
    });

    describe('R=1', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [1 1]
          R = all?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0], false);
      test([0, 0], [0, 1], false);
      test([0, 0], [1, 1], false);
      test([0, 0], [0, 10], false);
      test([0, 0], [0, 0, 10, 10], false);
      test([0, 0], [1, 10], false);
      test([0, 0], [1, 1, 10, 10], false);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500], false);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0], false);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0], false);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0], false);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0], false);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0], false);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0], false);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0], false);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });

    describe('R=[01]', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 1]
          R = all?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });
  });

  describe('isdiff', function() {

    describe('R=0', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 0]
          R = diff?(A B)
        `;
        if (out) out.R = 0;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1], false);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10], false);
      test([0, 0], [1, 1, 10, 10], false);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10], false);
      test([0, 1], [3, 13], false);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000], false);
      test([0, 1], [100, 100, 2000, 2000], false);
      test([1, 1], [0, 0], false);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10], false);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000], false);
      test([0, 10], [100, 100, 2000, 2000], false);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1], false);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000], false);
      test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
      test([1, 10], [0, 0], false);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0], false);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1], false);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1], false);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1], false);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10], false);
      test([100, 2000], [0, 0, 10, 10], false);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1], false);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10], false);
      test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });

    describe('R=1', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [1 1]
          R = diff?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0], false);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1], false);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10], false);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });

    describe('R=[01]', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 1]
          R = diff?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });
  });

  describe('islt', function() {

    describe('R=0', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 0]
          R = A <? B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1], false);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10], false);
      test([0, 0], [1, 1, 10, 10], false);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10], false);
      test([0, 1], [3, 13], false);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000], false);
      test([0, 1], [100, 100, 2000, 2000], false);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000], false);
      test([0, 10], [100, 100, 2000, 2000], false);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000], false);
      test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });

    describe('R=1', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [1 1]
          R = A <? B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0], false);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0], false);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0], false);
      test([1, 1], [0, 1], false);
      test([1, 1], [1, 1], false);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0], false);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0], false);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0], false);
      test([1, 10], [0, 1], false);
      test([1, 10], [1, 1], false);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0], false);
      test([1, 1, 10, 10], [0, 1], false);
      test([1, 1, 10, 10], [1, 1], false);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1], false);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10], false);
      test([10, 10], [0, 0, 10, 10], false);
      test([10, 10], [1, 10], false);
      test([10, 10], [1, 1, 10, 10], false);
      test([10, 10], [10, 10], false);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1], false);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0], false);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1], false);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10], false);
      test([100, 2000], [0, 0, 10, 10], false);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1], false);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10], false);
      test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });

    describe('R=[01]', function() {

      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 1]
          R = A <? B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });
  });

  describe('islte', function() {

    describe('R=0', function() {

      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 0]
          R = A <=? B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0], false);
      test([0, 0], [0, 1], false);
      test([0, 0], [1, 1], false);
      test([0, 0], [0, 10], false);
      test([0, 0], [0, 0, 10, 10], false);
      test([0, 0], [1, 10], false);
      test([0, 0], [1, 1, 10, 10], false);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500], false);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1], false);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10], false);
      test([0, 1], [1, 1, 10, 10], false);
      test([0, 1], [10, 10], false);
      test([0, 1], [3, 13], false);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000], false);
      test([0, 1], [100, 100, 2000, 2000], false);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1], false);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10], false);
      test([1, 1], [1, 1, 10, 10], false);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10], false);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000], false);
      test([0, 10], [100, 100, 2000, 2000], false);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10], false);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000], false);
      test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10], false);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10], false);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10], false);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });

    describe('R=1', function() {

      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [1 1]
          R = A <=? B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0], false);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0], false);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0], false);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1], false);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1], false);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1], false);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10], false);
      test([100, 2000], [0, 0, 10, 10], false);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1], false);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10], false);
      test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });

    describe('R=01', function() {

      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 1]
          R = A <=? B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });
  });

  describe('isnall', function() {

    describe('R=0', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 0]
          R = nall?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0], false);
      test([0, 0], [0, 1], false);
      test([0, 0], [1, 1], false);
      test([0, 0], [0, 10], false);
      test([0, 0], [0, 0, 10, 10], false);
      test([0, 0], [1, 10], false);
      test([0, 0], [1, 1, 10, 10], false);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500], false);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0], false);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0], false);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0], false);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0], false);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0], false);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0], false);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0], false);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });

    describe('R=1', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [1 1]
          R = nall?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1], false);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10], false);
      test([1, 1], [1, 1, 10, 10], false);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1], false);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10], false);
      test([1, 10], [1, 1, 10, 10], false);
      test([1, 10], [10, 10], false);
      test([1, 10], [3, 13], false);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1], false);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10], false);
      test([1, 1, 10, 10], [1, 1, 10, 10], false);
      test([1, 1, 10, 10], [10, 10], false);
      test([1, 1, 10, 10], [3, 13], false);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10], false);
      test([10, 10], [1, 1, 10, 10], false);
      test([10, 10], [10, 10], false);
      test([10, 10], [3, 13], false);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10], false);
      test([3, 13], [1, 1, 10, 10], false);
      test([3, 13], [10, 10], false);
      test([3, 13], [3, 13], false);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000], false);
      test([100, 2000], [100, 100, 2000, 2000], false);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000], false);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000], false);
    });

    describe('R=[01]', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 1]
          R = nall?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });
  });

  describe('isnone', function() {

    describe('R=0', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 0]
          R = none?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0], false);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });

    describe('R=1', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [1 1]
          R = none?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1], false);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10], false);
      test([0, 0], [1, 1, 10, 10], false);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1], false);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10], false);
      test([0, 1], [1, 1, 10, 10], false);
      test([0, 1], [10, 10], false);
      test([0, 1], [3, 13], false);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000], false);
      test([0, 1], [100, 100, 2000, 2000], false);
      test([1, 1], [0, 0], false);
      test([1, 1], [0, 1], false);
      test([1, 1], [1, 1], false);
      test([1, 1], [0, 10], false);
      test([1, 1], [0, 0, 10, 10], false);
      test([1, 1], [1, 10], false);
      test([1, 1], [1, 1, 10, 10], false);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500], false);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1], false);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10], false);
      test([0, 10], [1, 1, 10, 10], false);
      test([0, 10], [10, 10], false);
      test([0, 10], [3, 13], false);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000], false);
      test([0, 10], [100, 100, 2000, 2000], false);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1], false);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10], false);
      test([0, 0, 10, 10], [1, 1, 10, 10], false);
      test([0, 0, 10, 10], [10, 10], false);
      test([0, 0, 10, 10], [3, 13], false);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000], false);
      test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
      test([1, 10], [0, 0], false);
      test([1, 10], [0, 1], false);
      test([1, 10], [1, 1], false);
      test([1, 10], [0, 10], false);
      test([1, 10], [0, 0, 10, 10], false);
      test([1, 10], [1, 10], false);
      test([1, 10], [1, 1, 10, 10], false);
      test([1, 10], [10, 10], false);
      test([1, 10], [3, 13], false);
      test([1, 10], [0, 500], false);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0], false);
      test([1, 1, 10, 10], [0, 1], false);
      test([1, 1, 10, 10], [1, 1], false);
      test([1, 1, 10, 10], [0, 10], false);
      test([1, 1, 10, 10], [0, 0, 10, 10], false);
      test([1, 1, 10, 10], [1, 10], false);
      test([1, 1, 10, 10], [1, 1, 10, 10], false);
      test([1, 1, 10, 10], [10, 10], false);
      test([1, 1, 10, 10], [3, 13], false);
      test([1, 1, 10, 10], [0, 500], false);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1], false);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10], false);
      test([10, 10], [0, 0, 10, 10], false);
      test([10, 10], [1, 10], false);
      test([10, 10], [1, 1, 10, 10], false);
      test([10, 10], [10, 10], false);
      test([10, 10], [3, 13], false);
      test([10, 10], [0, 500], false);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1], false);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10], false);
      test([3, 13], [0, 0, 10, 10], false);
      test([3, 13], [1, 10], false);
      test([3, 13], [1, 1, 10, 10], false);
      test([3, 13], [10, 10], false);
      test([3, 13], [3, 13], false);
      test([3, 13], [0, 500], false);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1], false);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10], false);
      test([0, 500], [1, 1, 10, 10], false);
      test([0, 500], [10, 10], false);
      test([0, 500], [3, 13], false);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000], false);
      test([0, 500], [100, 100, 2000, 2000], false);
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1], false);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10], false);
      test([100, 2000], [0, 0, 10, 10], false);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      test([100, 2000], [0, 500], false);
      test([100, 2000], [100, 2000], false);
      test([100, 2000], [100, 100, 2000, 2000], false);
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1], false);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10], false);
      test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      test([100, 100, 2000, 2000], [0, 500], false);
      test([100, 100, 2000, 2000], [100, 2000], false);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000], false);
    });

    describe('R=[01]', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 1]
          R = none?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });
  });

  describe('issame', function() {

    describe('R=0', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 0]
          R = same?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0], false);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1], false);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10], false);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });

    describe('R=1', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [1 1]
          R = same?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1], false);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10], false);
      test([0, 0], [1, 1, 10, 10], false);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10], false);
      test([0, 1], [3, 13], false);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000], false);
      test([0, 1], [100, 100, 2000, 2000], false);
      test([1, 1], [0, 0], false);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10], false);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000], false);
      test([0, 10], [100, 100, 2000, 2000], false);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1], false);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000], false);
      test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
      test([1, 10], [0, 0], false);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0], false);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1], false);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1], false);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1], false);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10], false);
      test([100, 2000], [0, 0, 10, 10], false);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1], false);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10], false);
      test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });

    describe('R=[01]', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 1]
          R = same?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });
  });

  describe('issome', function() {

    describe('R=0', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 0]
          R = some?(A B)
        `;
        if (out) out.R = 0;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1], false);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10], false);
      test([0, 0], [1, 1, 10, 10], false);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1], false);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10], false);
      test([0, 1], [1, 1, 10, 10], false);
      test([0, 1], [10, 10], false);
      test([0, 1], [3, 13], false);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000], false);
      test([0, 1], [100, 100, 2000, 2000], false);
      test([1, 1], [0, 0], false);
      test([1, 1], [0, 1], false);
      test([1, 1], [1, 1], false);
      test([1, 1], [0, 10], false);
      test([1, 1], [0, 0, 10, 10], false);
      test([1, 1], [1, 10], false);
      test([1, 1], [1, 1, 10, 10], false);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500], false);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1], false);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10], false);
      test([0, 10], [1, 1, 10, 10], false);
      test([0, 10], [10, 10], false);
      test([0, 10], [3, 13], false);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000], false);
      test([0, 10], [100, 100, 2000, 2000], false);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1], false);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10], false);
      test([0, 0, 10, 10], [1, 1, 10, 10], false);
      test([0, 0, 10, 10], [10, 10], false);
      test([0, 0, 10, 10], [3, 13], false);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000], false);
      test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
      test([1, 10], [0, 0], false);
      test([1, 10], [0, 1], false);
      test([1, 10], [1, 1], false);
      test([1, 10], [0, 10], false);
      test([1, 10], [0, 0, 10, 10], false);
      test([1, 10], [1, 10], false);
      test([1, 10], [1, 1, 10, 10], false);
      test([1, 10], [10, 10], false);
      test([1, 10], [3, 13], false);
      test([1, 10], [0, 500], false);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0], false);
      test([1, 1, 10, 10], [0, 1], false);
      test([1, 1, 10, 10], [1, 1], false);
      test([1, 1, 10, 10], [0, 10], false);
      test([1, 1, 10, 10], [0, 0, 10, 10], false);
      test([1, 1, 10, 10], [1, 10], false);
      test([1, 1, 10, 10], [1, 1, 10, 10], false);
      test([1, 1, 10, 10], [10, 10], false);
      test([1, 1, 10, 10], [3, 13], false);
      test([1, 1, 10, 10], [0, 500], false);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1], false);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10], false);
      test([10, 10], [0, 0, 10, 10], false);
      test([10, 10], [1, 10], false);
      test([10, 10], [1, 1, 10, 10], false);
      test([10, 10], [10, 10], false);
      test([10, 10], [3, 13], false);
      test([10, 10], [0, 500], false);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1], false);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10], false);
      test([3, 13], [0, 0, 10, 10], false);
      test([3, 13], [1, 10], false);
      test([3, 13], [1, 1, 10, 10], false);
      test([3, 13], [10, 10], false);
      test([3, 13], [3, 13], false);
      test([3, 13], [0, 500], false);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1], false);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10], false);
      test([0, 500], [1, 1, 10, 10], false);
      test([0, 500], [10, 10], false);
      test([0, 500], [3, 13], false);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000], false);
      test([0, 500], [100, 100, 2000, 2000], false);
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1], false);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10], false);
      test([100, 2000], [0, 0, 10, 10], false);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      test([100, 2000], [0, 500], false);
      test([100, 2000], [100, 2000], false);
      test([100, 2000], [100, 100, 2000, 2000], false);
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1], false);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10], false);
      test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      test([100, 100, 2000, 2000], [0, 500], false);
      test([100, 100, 2000, 2000], [100, 2000], false);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000], false);
    });

    describe('R=1', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [1 1]
          R = some?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0], false);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });

    describe('R=[01]', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 1]
          R = some?(A B)
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10]);
      test([1, 1], [3, 13]);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000]);
      test([1, 1], [100, 100, 2000, 2000]);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000]);
      test([1, 10], [100, 100, 2000, 2000]);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000]);
      test([1, 1, 10, 10], [100, 100, 2000, 2000]);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1]);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000]);
      test([10, 10], [100, 100, 2000, 2000]);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1]);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000]);
      test([3, 13], [100, 100, 2000, 2000]);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      test([0, 500], [0, 500]);
      test([0, 500], [100, 2000]);
      test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1]);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10]);
      test([100, 2000], [1, 1, 10, 10]);
      test([100, 2000], [10, 10]);
      test([100, 2000], [3, 13]);
      test([100, 2000], [0, 500]);
      test([100, 2000], [100, 2000]);
      test([100, 2000], [100, 100, 2000, 2000]);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1]);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10]);
      test([100, 100, 2000, 2000], [1, 1, 10, 10]);
      test([100, 100, 2000, 2000], [10, 10]);
      test([100, 100, 2000, 2000], [3, 13]);
      test([100, 100, 2000, 2000], [0, 500]);
      test([100, 100, 2000, 2000], [100, 2000]);
      test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
    });
  });

  describe('lt', function() {


    function test(A, B, out) {
      let dsl = `
        : A [${A}]
        : B [${B}]
        A < B
      `;
      run(dsl, ['A', 'B'], out);
    }

    test([0, 0], [0, 0], false);
    test([0, 0], [0, 1]);
    test([0, 0], [1, 1]);
    test([0, 0], [0, 10]);
    test([0, 0], [0, 0, 10, 10]);
    test([0, 0], [1, 10]);
    test([0, 0], [1, 1, 10, 10]);
    test([0, 0], [10, 10]);
    test([0, 0], [3, 13]);
    test([0, 0], [0, 500]);
    test([0, 0], [100, 2000]);
    test([0, 0], [100, 100, 2000, 2000]);
    test([0, 1], [0, 0], false);
    test([0, 1], [0, 1]);
    test([0, 1], [1, 1]);
    test([0, 1], [0, 10]);
    test([0, 1], [0, 0, 10, 10]);
    test([0, 1], [1, 10]);
    test([0, 1], [1, 1, 10, 10]);
    test([0, 1], [10, 10]);
    test([0, 1], [3, 13]);
    test([0, 1], [0, 500]);
    test([0, 1], [100, 2000]);
    test([0, 1], [100, 100, 2000, 2000]);
    test([1, 1], [0, 0], false);
    test([1, 1], [0, 1], false);
    test([1, 1], [1, 1], false);
    test([1, 1], [0, 10]);
    test([1, 1], [0, 0, 10, 10]);
    test([1, 1], [1, 10]);
    test([1, 1], [1, 1, 10, 10]);
    test([1, 1], [10, 10]);
    test([1, 1], [3, 13]);
    test([1, 1], [0, 500]);
    test([1, 1], [100, 2000]);
    test([1, 1], [100, 100, 2000, 2000]);
    test([0, 10], [0, 0], false);
    test([0, 10], [0, 1]);
    test([0, 10], [1, 1]);
    test([0, 10], [0, 10]);
    test([0, 10], [0, 0, 10, 10]);
    test([0, 10], [1, 10]);
    test([0, 10], [1, 1, 10, 10]);
    test([0, 10], [10, 10]);
    test([0, 10], [3, 13]);
    test([0, 10], [0, 500]);
    test([0, 10], [100, 2000]);
    test([0, 10], [100, 100, 2000, 2000]);
    test([0, 0, 10, 10], [0, 0], false);
    test([0, 0, 10, 10], [0, 1]);
    test([0, 0, 10, 10], [1, 1]);
    test([0, 0, 10, 10], [0, 10]);
    test([0, 0, 10, 10], [0, 0, 10, 10]);
    test([0, 0, 10, 10], [1, 10]);
    test([0, 0, 10, 10], [1, 1, 10, 10]);
    test([0, 0, 10, 10], [10, 10]);
    test([0, 0, 10, 10], [3, 13]);
    test([0, 0, 10, 10], [0, 500]);
    test([0, 0, 10, 10], [100, 2000]);
    test([0, 0, 10, 10], [100, 100, 2000, 2000]);
    test([1, 10], [0, 0], false);
    //test([1, 10], [0, 1], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    test([1, 10], [1, 1], false);
    test([1, 10], [0, 10]);
    test([1, 10], [0, 0, 10, 10]);
    test([1, 10], [1, 10]);
    test([1, 10], [1, 1, 10, 10]);
    test([1, 10], [10, 10]);
    test([1, 10], [3, 13]);
    test([1, 10], [0, 500]);
    test([1, 10], [100, 2000]);
    test([1, 10], [100, 100, 2000, 2000]);
    test([1, 1, 10, 10], [0, 0], false);
    //test([1, 1, 10, 10], [0, 1], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([1, 1, 10, 10], [1, 1], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    test([1, 1, 10, 10], [0, 10]);
    test([1, 1, 10, 10], [0, 0, 10, 10]);
    test([1, 1, 10, 10], [1, 10]);
    test([1, 1, 10, 10], [1, 1, 10, 10]);
    test([1, 1, 10, 10], [10, 10]);
    test([1, 1, 10, 10], [3, 13]);
    test([1, 1, 10, 10], [0, 500]);
    test([1, 1, 10, 10], [100, 2000]);
    test([1, 1, 10, 10], [100, 100, 2000, 2000]);
    test([10, 10], [0, 0], false);
    test([10, 10], [0, 1], false);
    test([10, 10], [1, 1], false);
    test([10, 10], [0, 10], false);
    test([10, 10], [0, 0, 10, 10], false);
    test([10, 10], [1, 10], false);
    test([10, 10], [1, 1, 10, 10], false);
    test([10, 10], [10, 10], false);
    test([10, 10], [3, 13]);
    test([10, 10], [0, 500]);
    test([10, 10], [100, 2000]);
    test([10, 10], [100, 100, 2000, 2000]);
    test([3, 13], [0, 0], false);
    //test([3, 13], [0, 1], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([3, 13], [1, 1], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    test([3, 13], [0, 10]);
    test([3, 13], [0, 0, 10, 10]);
    test([3, 13], [1, 10]);
    test([3, 13], [1, 1, 10, 10]);
    test([3, 13], [10, 10]);
    test([3, 13], [3, 13]);
    test([3, 13], [0, 500]);
    test([3, 13], [100, 2000]);
    test([3, 13], [100, 100, 2000, 2000]);
    test([0, 500], [0, 0], false);
    test([0, 500], [0, 1]);
    test([0, 500], [1, 1]);
    test([0, 500], [0, 10]);
    test([0, 500], [0, 0, 10, 10]);
    test([0, 500], [1, 10]);
    test([0, 500], [1, 1, 10, 10]);
    test([0, 500], [10, 10]);
    test([0, 500], [3, 13]);
    test([0, 500], [0, 500]);
    test([0, 500], [100, 2000]);
    test([0, 500], [100, 100, 2000, 2000]);
    test([100, 2000], [0, 0], false);
    //test([100, 2000], [0, 1], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 2000], [1, 1], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 2000], [0, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 2000], [0, 0, 10, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 2000], [1, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 2000], [1, 1, 10, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 2000], [10, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 2000], [3, 13], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    test([100, 2000], [0, 500]);
    test([100, 2000], [100, 2000]);
    test([100, 2000], [100, 100, 2000, 2000]);
    test([100, 100, 2000, 2000], [0, 0], false);
    //test([100, 100, 2000, 2000], [0, 1], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 100, 2000, 2000], [1, 1], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 100, 2000, 2000], [0, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 100, 2000, 2000], [0, 0, 10, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 100, 2000, 2000], [1, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 100, 2000, 2000], [1, 1, 10, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 100, 2000, 2000], [10, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 100, 2000, 2000], [3, 13], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    test([100, 100, 2000, 2000], [0, 500]);
    test([100, 100, 2000, 2000], [100, 2000]);
    test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
  });

  describe('lte', function() {


    function test(A, B, out) {
      let dsl = `
        : A [${A}]
        : B [${B}]
        A <= B
      `;
      run(dsl, ['A', 'B'], out);
    }

    test([0, 0], [0, 0]);
    test([0, 0], [0, 1]);
    test([0, 0], [1, 1]);
    test([0, 0], [0, 10]);
    test([0, 0], [0, 0, 10, 10]);
    test([0, 0], [1, 10]);
    test([0, 0], [1, 1, 10, 10]);
    test([0, 0], [10, 10]);
    test([0, 0], [3, 13]);
    test([0, 0], [0, 500]);
    test([0, 0], [100, 2000]);
    test([0, 0], [100, 100, 2000, 2000]);
    test([0, 1], [0, 0]);
    test([0, 1], [0, 1]);
    test([0, 1], [1, 1]);
    test([0, 1], [0, 10]);
    test([0, 1], [0, 0, 10, 10]);
    test([0, 1], [1, 10]);
    test([0, 1], [1, 1, 10, 10]);
    test([0, 1], [10, 10]);
    test([0, 1], [3, 13]);
    test([0, 1], [0, 500]);
    test([0, 1], [100, 2000]);
    test([0, 1], [100, 100, 2000, 2000]);
    test([1, 1], [0, 0], false);
    test([1, 1], [0, 1]);
    test([1, 1], [1, 1]);
    test([1, 1], [0, 10]);
    test([1, 1], [0, 0, 10, 10]);
    test([1, 1], [1, 10]);
    test([1, 1], [1, 1, 10, 10]);
    test([1, 1], [10, 10]);
    test([1, 1], [3, 13]);
    test([1, 1], [0, 500]);
    test([1, 1], [100, 2000]);
    test([1, 1], [100, 100, 2000, 2000]);
    test([0, 10], [0, 0]);
    test([0, 10], [0, 1]);
    test([0, 10], [1, 1]);
    test([0, 10], [0, 10]);
    test([0, 10], [0, 0, 10, 10]);
    test([0, 10], [1, 10]);
    test([0, 10], [1, 1, 10, 10]);
    test([0, 10], [10, 10]);
    test([0, 10], [3, 13]);
    test([0, 10], [0, 500]);
    test([0, 10], [100, 2000]);
    test([0, 10], [100, 100, 2000, 2000]);
    test([0, 0, 10, 10], [0, 0]);
    test([0, 0, 10, 10], [0, 1]);
    test([0, 0, 10, 10], [1, 1]);
    test([0, 0, 10, 10], [0, 10]);
    test([0, 0, 10, 10], [0, 0, 10, 10]);
    test([0, 0, 10, 10], [1, 10]);
    test([0, 0, 10, 10], [1, 1, 10, 10]);
    test([0, 0, 10, 10], [10, 10]);
    test([0, 0, 10, 10], [3, 13]);
    test([0, 0, 10, 10], [0, 500]);
    test([0, 0, 10, 10], [100, 2000]);
    test([0, 0, 10, 10], [100, 100, 2000, 2000]);
    test([1, 10], [0, 0], false);
    test([1, 10], [0, 1]);
    test([1, 10], [1, 1]);
    test([1, 10], [0, 10]);
    test([1, 10], [0, 0, 10, 10]);
    test([1, 10], [1, 10]);
    test([1, 10], [1, 1, 10, 10]);
    test([1, 10], [10, 10]);
    test([1, 10], [3, 13]);
    test([1, 10], [0, 500]);
    test([1, 10], [100, 2000]);
    test([1, 10], [100, 100, 2000, 2000]);
    test([1, 1, 10, 10], [0, 0], false);
    test([1, 1, 10, 10], [0, 1]);
    test([1, 1, 10, 10], [1, 1]);
    test([1, 1, 10, 10], [0, 10]);
    test([1, 1, 10, 10], [0, 0, 10, 10]);
    test([1, 1, 10, 10], [1, 10]);
    test([1, 1, 10, 10], [1, 1, 10, 10]);
    test([1, 1, 10, 10], [10, 10]);
    test([1, 1, 10, 10], [3, 13]);
    test([1, 1, 10, 10], [0, 500]);
    test([1, 1, 10, 10], [100, 2000]);
    test([1, 1, 10, 10], [100, 100, 2000, 2000]);
    test([10, 10], [0, 0], false);
    test([10, 10], [0, 1], false);
    test([10, 10], [1, 1], false);
    test([10, 10], [0, 10]);
    test([10, 10], [0, 0, 10, 10]);
    test([10, 10], [1, 10]);
    test([10, 10], [1, 1, 10, 10]);
    test([10, 10], [10, 10]);
    test([10, 10], [3, 13]);
    test([10, 10], [0, 500]);
    test([10, 10], [100, 2000]);
    test([10, 10], [100, 100, 2000, 2000]);
    test([3, 13], [0, 0], false);
    //test([3, 13], [0, 1], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([3, 13], [1, 1], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    test([3, 13], [0, 10]);
    test([3, 13], [0, 0, 10, 10]);
    test([3, 13], [1, 10]);
    test([3, 13], [1, 1, 10, 10]);
    test([3, 13], [10, 10]);
    test([3, 13], [3, 13]);
    test([3, 13], [0, 500]);
    test([3, 13], [100, 2000]);
    test([3, 13], [100, 100, 2000, 2000]);
    test([0, 500], [0, 0]);
    test([0, 500], [0, 1]);
    test([0, 500], [1, 1]);
    test([0, 500], [0, 10]);
    test([0, 500], [0, 0, 10, 10]);
    test([0, 500], [1, 10]);
    test([0, 500], [1, 1, 10, 10]);
    test([0, 500], [10, 10]);
    test([0, 500], [3, 13]);
    test([0, 500], [0, 500]);
    test([0, 500], [100, 2000]);
    test([0, 500], [100, 100, 2000, 2000]);
    test([100, 2000], [0, 0], false);
    //test([100, 2000], [0, 1], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 2000], [1, 1], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 2000], [0, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 2000], [0, 0, 10, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 2000], [1, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 2000], [1, 1, 10, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 2000], [10, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 2000], [3, 13], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    test([100, 2000], [0, 500]);
    test([100, 2000], [100, 2000]);
    test([100, 2000], [100, 100, 2000, 2000]);
    test([100, 100, 2000, 2000], [0, 0], false);
    //test([100, 100, 2000, 2000], [0, 1], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 100, 2000, 2000], [1, 1], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 100, 2000, 2000], [0, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 100, 2000, 2000], [0, 0, 10, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 100, 2000, 2000], [1, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 100, 2000, 2000], [1, 1, 10, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 100, 2000, 2000], [10, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    //test([100, 100, 2000, 2000], [3, 13], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
    test([100, 100, 2000, 2000], [0, 500]);
    test([100, 100, 2000, 2000], [100, 2000]);
    test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
  });

  describe('min', function() {

    // some of [0,500], [100,2000], [100,100,2000,2000] are disabled because they
    // simply take too long as FD will brute force them before bailing anyways.

    describe('R=0', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 0]
          R = A - B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1], false);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10], false);
      test([0, 0], [1, 1, 10, 10], false);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10], false);
      test([0, 1], [3, 13], false);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000], false);
      test([0, 1], [100, 100, 2000, 2000], false);
      test([1, 1], [0, 0], false);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10], false);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000], false);
      test([0, 10], [100, 100, 2000, 2000], false);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1], false);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000], false);
      test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
      test([1, 10], [0, 0], false);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0], false);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1], false);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1], false);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      //test([0,500],                  [0,500],                      false);
      //test([0,500],                  [100,2000],                   false);
      //test([0,500],                  [100,100,2000,2000],          false);
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1], false);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10], false);
      test([100, 2000], [0, 0, 10, 10], false);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      //test([100,2000],               [0,500],                      false);
      //test([100,2000],               [100,2000],                   false);
      //test([100,2000],               [100,100,2000,2000],          false);
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1], false);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10], false);
      test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      //test([100,100,2000,2000],      [0,500],                      false);
      //test([100,100,2000,2000],      [100,2000],                   false);
      //test([100,100,2000,2000],      [100,100,2000,2000],          false);
    });

    describe('R=1', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [1 1]
          R = A - B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0], false);
      test([0, 0], [0, 1], false);
      test([0, 0], [1, 1], false);
      test([0, 0], [0, 10], false);
      test([0, 0], [0, 0, 10, 10], false);
      test([0, 0], [1, 10], false);
      test([0, 0], [1, 1, 10, 10], false);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500], false);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1], false);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10], false);
      test([0, 1], [1, 1, 10, 10], false);
      test([0, 1], [10, 10], false);
      test([0, 1], [3, 13], false);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000], false);
      test([0, 1], [100, 100, 2000, 2000], false);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1], false);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10], false);
      test([1, 1], [1, 1, 10, 10], false);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10], false);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000], false);
      test([0, 10], [100, 100, 2000, 2000], false);
      test([0, 0, 10, 10], [0, 0], false);
      test([0, 0, 10, 10], [0, 1], false);
      test([0, 0, 10, 10], [1, 1], false);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10], false);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10], false);
      test([0, 0, 10, 10], [10, 10], false);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000], false);
      test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10], false);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1], false);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10], false);
      test([1, 1, 10, 10], [10, 10], false);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1], false);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10], false);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10], false);
      test([10, 10], [10, 10], false);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1], false);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      //test([0,500],                  [0,500],                      false);
      //test([0,500],                  [100,2000],                   false);
      //test([0,500],                  [100,100,2000,2000],          false);
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1], false);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10], false);
      test([100, 2000], [0, 0, 10, 10], false);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      //test([100,2000],               [0,500],                      false);
      //test([100,2000],               [100,2000],                   false);
      //test([100,2000],               [100,100,2000,2000],          false);
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1], false);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10], false);
      test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      //test([100,100,2000,2000],      [0,500],                      false);
      //test([100,100,2000,2000],      [100,2000],                   false);
      //test([100,100,2000,2000],      [100,100,2000,2000],          false);
    });

    describe('R=[01]', function() {


      function test(A, B, out) {

        let dsl = `
         : A [${A}]
         : B [${B}]
         : R [0 1]
         R = A - B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1], false);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10], false);
      test([0, 0], [1, 1, 10, 10], false);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10], false);
      test([0, 1], [3, 13], false);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000], false);
      test([0, 1], [100, 100, 2000, 2000], false);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000], false);
      test([0, 10], [100, 100, 2000, 2000], false);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1], false);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000], false);
      test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10]);
      test([1, 10], [3, 13]);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10]);
      test([1, 1, 10, 10], [3, 13]);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1], false);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10]);
      test([10, 10], [1, 1, 10, 10]);
      test([10, 10], [10, 10]);
      test([10, 10], [3, 13]);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1], false);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10]);
      test([3, 13], [1, 1, 10, 10]);
      test([3, 13], [10, 10]);
      test([3, 13], [3, 13]);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      //test([0,500],                  [0,500],                      false);
      //test([0,500],                  [100,2000],                   false);
      //test([0,500],                  [100,100,2000,2000],          false);
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1], false);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10], false);
      test([100, 2000], [0, 0, 10, 10], false);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      //test([100,2000],               [0,500],                      false);
      //test([100,2000],               [100,2000],                   false);
      //test([100,2000],               [100,100,2000,2000],          false);
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1], false);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10], false);
      test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      //test([100,100,2000,2000],      [0,500],                      false);
      //test([100,100,2000,2000],      [100,2000],                   false);
      //test([100,100,2000,2000],      [100,100,2000,2000],          false);
    });
  });

  describe('nimp', function() {


    function test(A, B, out) {
      // A must be nonzero and B must be zero
      let dsl = `
        : A [${A}]
        : B [${B}]
        A !-> B
      `;
      run(dsl, ['A', 'B'], out);
    }

    test([0, 0], [0, 0], false);
    test([0, 0], [0, 1], false);
    test([0, 0], [1, 1], false);
    test([0, 0], [0, 10], false);
    test([0, 0], [0, 0, 10, 10], false);
    test([0, 0], [1, 10], false);
    test([0, 0], [1, 1, 10, 10], false);
    test([0, 0], [10, 10], false);
    test([0, 0], [3, 13], false);
    test([0, 0], [0, 500], false);
    test([0, 0], [100, 2000], false);
    test([0, 0], [100, 100, 2000, 2000], false);
    test([0, 1], [0, 0]);
    test([0, 1], [0, 1]);
    test([0, 1], [1, 1], false);
    test([0, 1], [0, 10]);
    test([0, 1], [0, 0, 10, 10]);
    test([0, 1], [1, 10], false);
    test([0, 1], [1, 1, 10, 10], false);
    test([0, 1], [10, 10], false);
    test([0, 1], [3, 13], false);
    test([0, 1], [0, 500]);
    test([0, 1], [100, 2000], false);
    test([0, 1], [100, 100, 2000, 2000], false);
    test([1, 1], [0, 0]);
    test([1, 1], [0, 1]);
    test([1, 1], [1, 1], false);
    test([1, 1], [0, 10]);
    test([1, 1], [0, 0, 10, 10]);
    test([1, 1], [1, 10], false);
    test([1, 1], [1, 1, 10, 10], false);
    test([1, 1], [10, 10], false);
    test([1, 1], [3, 13], false);
    test([1, 1], [0, 500]);
    test([1, 1], [100, 2000], false);
    test([1, 1], [100, 100, 2000, 2000], false);
    test([0, 10], [0, 0]);
    test([0, 10], [0, 1]);
    test([0, 10], [1, 1], false);
    test([0, 10], [0, 10]);
    test([0, 10], [0, 0, 10, 10]);
    test([0, 10], [1, 10], false);
    test([0, 10], [1, 1, 10, 10], false);
    test([0, 10], [10, 10], false);
    test([0, 10], [3, 13], false);
    test([0, 10], [0, 500]);
    test([0, 10], [100, 2000], false);
    test([0, 10], [100, 100, 2000, 2000], false);
    test([0, 0, 10, 10], [0, 0]);
    test([0, 0, 10, 10], [0, 1]);
    test([0, 0, 10, 10], [1, 1], false);
    test([0, 0, 10, 10], [0, 10]);
    test([0, 0, 10, 10], [0, 0, 10, 10]);
    test([0, 0, 10, 10], [1, 10], false);
    test([0, 0, 10, 10], [1, 1, 10, 10], false);
    test([0, 0, 10, 10], [10, 10], false);
    test([0, 0, 10, 10], [3, 13], false);
    test([0, 0, 10, 10], [0, 500]);
    test([0, 0, 10, 10], [100, 2000], false);
    test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
    test([1, 10], [0, 0]);
    test([1, 10], [0, 1]);
    test([1, 10], [1, 1], false);
    test([1, 10], [0, 10]);
    test([1, 10], [0, 0, 10, 10]);
    test([1, 10], [1, 10], false);
    test([1, 10], [1, 1, 10, 10], false);
    test([1, 10], [10, 10], false);
    test([1, 10], [3, 13], false);
    test([1, 10], [0, 500]);
    test([1, 10], [100, 2000], false);
    test([1, 10], [100, 100, 2000, 2000], false);
    test([1, 1, 10, 10], [0, 0]);
    test([1, 1, 10, 10], [0, 1]);
    test([1, 1, 10, 10], [1, 1], false);
    test([1, 1, 10, 10], [0, 10]);
    test([1, 1, 10, 10], [0, 0, 10, 10]);
    test([1, 1, 10, 10], [1, 10], false);
    test([1, 1, 10, 10], [1, 1, 10, 10], false);
    test([1, 1, 10, 10], [10, 10], false);
    test([1, 1, 10, 10], [3, 13], false);
    test([1, 1, 10, 10], [0, 500]);
    test([1, 1, 10, 10], [100, 2000], false);
    test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
    test([10, 10], [0, 0]);
    test([10, 10], [0, 1]);
    test([10, 10], [1, 1], false);
    test([10, 10], [0, 10]);
    test([10, 10], [0, 0, 10, 10]);
    test([10, 10], [1, 10], false);
    test([10, 10], [1, 1, 10, 10], false);
    test([10, 10], [10, 10], false);
    test([10, 10], [3, 13], false);
    test([10, 10], [0, 500]);
    test([10, 10], [100, 2000], false);
    test([10, 10], [100, 100, 2000, 2000], false);
    test([3, 13], [0, 0]);
    test([3, 13], [0, 1]);
    test([3, 13], [1, 1], false);
    test([3, 13], [0, 10]);
    test([3, 13], [0, 0, 10, 10]);
    test([3, 13], [1, 10], false);
    test([3, 13], [1, 1, 10, 10], false);
    test([3, 13], [10, 10], false);
    test([3, 13], [3, 13], false);
    test([3, 13], [0, 500]);
    test([3, 13], [100, 2000], false);
    test([3, 13], [100, 100, 2000, 2000], false);
    test([0, 500], [0, 0]);
    test([0, 500], [0, 1]);
    test([0, 500], [1, 1], false);
    test([0, 500], [0, 10]);
    test([0, 500], [0, 0, 10, 10]);
    test([0, 500], [1, 10], false);
    test([0, 500], [1, 1, 10, 10], false);
    test([0, 500], [10, 10], false);
    test([0, 500], [3, 13], false);
    test([0, 500], [0, 500]);
    test([0, 500], [100, 2000], false);
    test([0, 500], [100, 100, 2000, 2000], false);
    test([100, 2000], [0, 0]);
    test([100, 2000], [0, 1]);
    test([100, 2000], [1, 1], false);
    test([100, 2000], [0, 10]);
    test([100, 2000], [0, 0, 10, 10]);
    test([100, 2000], [1, 10], false);
    test([100, 2000], [1, 1, 10, 10], false);
    test([100, 2000], [10, 10], false);
    test([100, 2000], [3, 13], false);
    test([100, 2000], [0, 500]);
    test([100, 2000], [100, 2000], false);
    test([100, 2000], [100, 100, 2000, 2000], false);
    test([100, 100, 2000, 2000], [0, 0]);
    test([100, 100, 2000, 2000], [0, 1]);
    test([100, 100, 2000, 2000], [1, 1], false);
    test([100, 100, 2000, 2000], [0, 10]);
    test([100, 100, 2000, 2000], [0, 0, 10, 10]);
    test([100, 100, 2000, 2000], [1, 10], false);
    test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
    test([100, 100, 2000, 2000], [10, 10], false);
    test([100, 100, 2000, 2000], [3, 13], false);
    test([100, 100, 2000, 2000], [0, 500]);
    test([100, 100, 2000, 2000], [100, 2000], false);
    test([100, 100, 2000, 2000], [100, 100, 2000, 2000], false);
  });

  describe('nall', function() {


    function test(A, B, out) {
      // at least A or B has to be zero
      let dsl = `
        : A [${A}]
        : B [${B}]
        A !& B
      `;
      run(dsl, ['A', 'B'], out);
    }

    test([0, 0], [0, 0]);
    test([0, 0], [0, 1]);
    test([0, 0], [1, 1]);
    test([0, 0], [0, 10]);
    test([0, 0], [0, 0, 10, 10]);
    test([0, 0], [1, 10]);
    test([0, 0], [1, 1, 10, 10]);
    test([0, 0], [10, 10]);
    test([0, 0], [3, 13]);
    test([0, 0], [0, 500]);
    test([0, 0], [100, 2000]);
    test([0, 0], [100, 100, 2000, 2000]);
    test([0, 1], [0, 0]);
    test([0, 1], [0, 1]);
    test([0, 1], [1, 1]);
    test([0, 1], [0, 10]);
    test([0, 1], [0, 0, 10, 10]);
    test([0, 1], [1, 10]);
    test([0, 1], [1, 1, 10, 10]);
    test([0, 1], [10, 10]);
    test([0, 1], [3, 13]);
    test([0, 1], [0, 500]);
    test([0, 1], [100, 2000]);
    test([0, 1], [100, 100, 2000, 2000]);
    test([1, 1], [0, 0]);
    test([1, 1], [0, 1]);
    test([1, 1], [1, 1], false);
    test([1, 1], [0, 10]);
    test([1, 1], [0, 0, 10, 10]);
    test([1, 1], [1, 10], false);
    test([1, 1], [1, 1, 10, 10], false);
    test([1, 1], [10, 10], false);
    test([1, 1], [3, 13], false);
    test([1, 1], [0, 500]);
    test([1, 1], [100, 2000], false);
    test([1, 1], [100, 100, 2000, 2000], false);
    test([0, 10], [0, 0]);
    test([0, 10], [0, 1]);
    test([0, 10], [1, 1]);
    test([0, 10], [0, 10]);
    test([0, 10], [0, 0, 10, 10]);
    test([0, 10], [1, 10]);
    test([0, 10], [1, 1, 10, 10]);
    test([0, 10], [10, 10]);
    test([0, 10], [3, 13]);
    test([0, 10], [0, 500]);
    test([0, 10], [100, 2000]);
    test([0, 10], [100, 100, 2000, 2000]);
    test([0, 0, 10, 10], [0, 0]);
    test([0, 0, 10, 10], [0, 1]);
    test([0, 0, 10, 10], [1, 1]);
    test([0, 0, 10, 10], [0, 10]);
    test([0, 0, 10, 10], [0, 0, 10, 10]);
    test([0, 0, 10, 10], [1, 10]);
    test([0, 0, 10, 10], [1, 1, 10, 10]);
    test([0, 0, 10, 10], [10, 10]);
    test([0, 0, 10, 10], [3, 13]);
    test([0, 0, 10, 10], [0, 500]);
    test([0, 0, 10, 10], [100, 2000]);
    test([0, 0, 10, 10], [100, 100, 2000, 2000]);
    test([1, 10], [0, 0]);
    test([1, 10], [0, 1]);
    test([1, 10], [1, 1], false);
    test([1, 10], [0, 10]);
    test([1, 10], [0, 0, 10, 10]);
    test([1, 10], [1, 10], false);
    test([1, 10], [1, 1, 10, 10], false);
    test([1, 10], [10, 10], false);
    test([1, 10], [3, 13], false);
    test([1, 10], [0, 500]);
    test([1, 10], [100, 2000], false);
    test([1, 10], [100, 100, 2000, 2000], false);
    test([1, 1, 10, 10], [0, 0]);
    test([1, 1, 10, 10], [0, 1]);
    test([1, 1, 10, 10], [1, 1], false);
    test([1, 1, 10, 10], [0, 10]);
    test([1, 1, 10, 10], [0, 0, 10, 10]);
    test([1, 1, 10, 10], [1, 10], false);
    test([1, 1, 10, 10], [1, 1, 10, 10], false);
    test([1, 1, 10, 10], [10, 10], false);
    test([1, 1, 10, 10], [3, 13], false);
    test([1, 1, 10, 10], [0, 500]);
    test([1, 1, 10, 10], [100, 2000], false);
    test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
    test([10, 10], [0, 0]);
    test([10, 10], [0, 1]);
    test([10, 10], [1, 1], false);
    test([10, 10], [0, 10]);
    test([10, 10], [0, 0, 10, 10]);
    test([10, 10], [1, 10], false);
    test([10, 10], [1, 1, 10, 10], false);
    test([10, 10], [10, 10], false);
    test([10, 10], [3, 13], false);
    test([10, 10], [0, 500]);
    test([10, 10], [100, 2000], false);
    test([10, 10], [100, 100, 2000, 2000], false);
    test([3, 13], [0, 0]);
    test([3, 13], [0, 1]);
    test([3, 13], [1, 1], false);
    test([3, 13], [0, 10]);
    test([3, 13], [0, 0, 10, 10]);
    test([3, 13], [1, 10], false);
    test([3, 13], [1, 1, 10, 10], false);
    test([3, 13], [10, 10], false);
    test([3, 13], [3, 13], false);
    test([3, 13], [0, 500]);
    test([3, 13], [100, 2000], false);
    test([3, 13], [100, 100, 2000, 2000], false);
    test([0, 500], [0, 0]);
    test([0, 500], [0, 1]);
    test([0, 500], [1, 1]);
    test([0, 500], [0, 10]);
    test([0, 500], [0, 0, 10, 10]);
    test([0, 500], [1, 10]);
    test([0, 500], [1, 1, 10, 10]);
    test([0, 500], [10, 10]);
    test([0, 500], [3, 13]);
    test([0, 500], [0, 500]);
    test([0, 500], [100, 2000]);
    test([0, 500], [100, 100, 2000, 2000]);
    test([100, 2000], [0, 0]);
    test([100, 2000], [0, 1]);
    test([100, 2000], [1, 1], false);
    test([100, 2000], [0, 10]);
    test([100, 2000], [0, 0, 10, 10]);
    test([100, 2000], [1, 10], false);
    test([100, 2000], [1, 1, 10, 10], false);
    test([100, 2000], [10, 10], false);
    test([100, 2000], [3, 13], false);
    test([100, 2000], [0, 500]);
    test([100, 2000], [100, 2000], false);
    test([100, 2000], [100, 100, 2000, 2000], false);
    test([100, 100, 2000, 2000], [0, 0]);
    test([100, 100, 2000, 2000], [0, 1]);
    test([100, 100, 2000, 2000], [1, 1], false);
    test([100, 100, 2000, 2000], [0, 10]);
    test([100, 100, 2000, 2000], [0, 0, 10, 10]);
    test([100, 100, 2000, 2000], [1, 10], false);
    test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
    test([100, 100, 2000, 2000], [10, 10], false);
    test([100, 100, 2000, 2000], [3, 13], false);
    test([100, 100, 2000, 2000], [0, 500]);
    test([100, 100, 2000, 2000], [100, 2000], false);
    test([100, 100, 2000, 2000], [100, 100, 2000, 2000], false);
  });

  describe('none', function() {


    function test(A, B, out) {
      // A must be zero, B must be zero
      let dsl = `
        : A [${A}]
        : B [${B}]
        A !| B
      `;
      run(dsl, ['A', 'B'], out);
    }

    test([0, 0], [0, 0]);
    test([0, 0], [0, 1]);
    test([0, 0], [1, 1], false);
    test([0, 0], [0, 10]);
    test([0, 0], [0, 0, 10, 10]);
    test([0, 0], [1, 10], false);
    test([0, 0], [1, 1, 10, 10], false);
    test([0, 0], [10, 10], false);
    test([0, 0], [3, 13], false);
    test([0, 0], [0, 500]);
    test([0, 0], [100, 2000], false);
    test([0, 0], [100, 100, 2000, 2000], false);
    test([0, 1], [0, 0]);
    test([0, 1], [0, 1]);
    test([0, 1], [1, 1], false);
    test([0, 1], [0, 10]);
    test([0, 1], [0, 0, 10, 10]);
    test([0, 1], [1, 10], false);
    test([0, 1], [1, 1, 10, 10], false);
    test([0, 1], [10, 10], false);
    test([0, 1], [3, 13], false);
    test([0, 1], [0, 500]);
    test([0, 1], [100, 2000], false);
    test([0, 1], [100, 100, 2000, 2000], false);
    test([1, 1], [0, 0], false);
    test([1, 1], [0, 1], false);
    test([1, 1], [1, 1], false);
    test([1, 1], [0, 10], false);
    test([1, 1], [0, 0, 10, 10], false);
    test([1, 1], [1, 10], false);
    test([1, 1], [1, 1, 10, 10], false);
    test([1, 1], [10, 10], false);
    test([1, 1], [3, 13], false);
    test([1, 1], [0, 500], false);
    test([1, 1], [100, 2000], false);
    test([1, 1], [100, 100, 2000, 2000], false);
    test([0, 10], [0, 0]);
    test([0, 10], [0, 1]);
    test([0, 10], [1, 1], false);
    test([0, 10], [0, 10]);
    test([0, 10], [0, 0, 10, 10]);
    test([0, 10], [1, 10], false);
    test([0, 10], [1, 1, 10, 10], false);
    test([0, 10], [10, 10], false);
    test([0, 10], [3, 13], false);
    test([0, 10], [0, 500]);
    test([0, 10], [100, 2000], false);
    test([0, 10], [100, 100, 2000, 2000], false);
    test([0, 0, 10, 10], [0, 0]);
    test([0, 0, 10, 10], [0, 1]);
    test([0, 0, 10, 10], [1, 1], false);
    test([0, 0, 10, 10], [0, 10]);
    test([0, 0, 10, 10], [0, 0, 10, 10]);
    test([0, 0, 10, 10], [1, 10], false);
    test([0, 0, 10, 10], [1, 1, 10, 10], false);
    test([0, 0, 10, 10], [10, 10], false);
    test([0, 0, 10, 10], [3, 13], false);
    test([0, 0, 10, 10], [0, 500]);
    test([0, 0, 10, 10], [100, 2000], false);
    test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
    test([1, 10], [0, 0], false);
    test([1, 10], [0, 1], false);
    test([1, 10], [1, 1], false);
    test([1, 10], [0, 10], false);
    test([1, 10], [0, 0, 10, 10], false);
    test([1, 10], [1, 10], false);
    test([1, 10], [1, 1, 10, 10], false);
    test([1, 10], [10, 10], false);
    test([1, 10], [3, 13], false);
    test([1, 10], [0, 500], false);
    test([1, 10], [100, 2000], false);
    test([1, 10], [100, 100, 2000, 2000], false);
    test([1, 1, 10, 10], [0, 0], false);
    test([1, 1, 10, 10], [0, 1], false);
    test([1, 1, 10, 10], [1, 1], false);
    test([1, 1, 10, 10], [0, 10], false);
    test([1, 1, 10, 10], [0, 0, 10, 10], false);
    test([1, 1, 10, 10], [1, 10], false);
    test([1, 1, 10, 10], [1, 1, 10, 10], false);
    test([1, 1, 10, 10], [10, 10], false);
    test([1, 1, 10, 10], [3, 13], false);
    test([1, 1, 10, 10], [0, 500], false);
    test([1, 1, 10, 10], [100, 2000], false);
    test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
    test([10, 10], [0, 0], false);
    test([10, 10], [0, 1], false);
    test([10, 10], [1, 1], false);
    test([10, 10], [0, 10], false);
    test([10, 10], [0, 0, 10, 10], false);
    test([10, 10], [1, 10], false);
    test([10, 10], [1, 1, 10, 10], false);
    test([10, 10], [10, 10], false);
    test([10, 10], [3, 13], false);
    test([10, 10], [0, 500], false);
    test([10, 10], [100, 2000], false);
    test([10, 10], [100, 100, 2000, 2000], false);
    test([3, 13], [0, 0], false);
    test([3, 13], [0, 1], false);
    test([3, 13], [1, 1], false);
    test([3, 13], [0, 10], false);
    test([3, 13], [0, 0, 10, 10], false);
    test([3, 13], [1, 10], false);
    test([3, 13], [1, 1, 10, 10], false);
    test([3, 13], [10, 10], false);
    test([3, 13], [3, 13], false);
    test([3, 13], [0, 500], false);
    test([3, 13], [100, 2000], false);
    test([3, 13], [100, 100, 2000, 2000], false);
    test([0, 500], [0, 0]);
    test([0, 500], [0, 1]);
    test([0, 500], [1, 1], false);
    test([0, 500], [0, 10]);
    test([0, 500], [0, 0, 10, 10]);
    test([0, 500], [1, 10], false);
    test([0, 500], [1, 1, 10, 10], false);
    test([0, 500], [10, 10], false);
    test([0, 500], [3, 13], false);
    test([0, 500], [0, 500]);
    test([0, 500], [100, 2000], false);
    test([0, 500], [100, 100, 2000, 2000], false);
    test([100, 2000], [0, 0], false);
    test([100, 2000], [0, 1], false);
    test([100, 2000], [1, 1], false);
    test([100, 2000], [0, 10], false);
    test([100, 2000], [0, 0, 10, 10], false);
    test([100, 2000], [1, 10], false);
    test([100, 2000], [1, 1, 10, 10], false);
    test([100, 2000], [10, 10], false);
    test([100, 2000], [3, 13], false);
    test([100, 2000], [0, 500], false);
    test([100, 2000], [100, 2000], false);
    test([100, 2000], [100, 100, 2000, 2000], false);
    test([100, 100, 2000, 2000], [0, 0], false);
    test([100, 100, 2000, 2000], [0, 1], false);
    test([100, 100, 2000, 2000], [1, 1], false);
    test([100, 100, 2000, 2000], [0, 10], false);
    test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
    test([100, 100, 2000, 2000], [1, 10], false);
    test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
    test([100, 100, 2000, 2000], [10, 10], false);
    test([100, 100, 2000, 2000], [3, 13], false);
    test([100, 100, 2000, 2000], [0, 500], false);
    test([100, 100, 2000, 2000], [100, 2000], false);
    test([100, 100, 2000, 2000], [100, 100, 2000, 2000], false);
  });

  describe('product', function() {

    // some of [0,500], [100,2000], [100,100,2000,2000] are disabled because they
    // simply take too long as FD will brute force them before bailing anyways.

    describe('R=0', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 0]
          R = A * B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1], false);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10], false);
      test([1, 1], [1, 1, 10, 10], false);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1], false);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10], false);
      test([1, 10], [1, 1, 10, 10], false);
      test([1, 10], [10, 10], false);
      test([1, 10], [3, 13], false);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1], false);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10], false);
      test([1, 1, 10, 10], [1, 1, 10, 10], false);
      test([1, 1, 10, 10], [10, 10], false);
      test([1, 1, 10, 10], [3, 13], false);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10], false);
      test([10, 10], [1, 1, 10, 10], false);
      test([10, 10], [10, 10], false);
      test([10, 10], [3, 13], false);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10], false);
      test([3, 13], [1, 1, 10, 10], false);
      test([3, 13], [10, 10], false);
      test([3, 13], [3, 13], false);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      //test([0, 500], [0, 500]);
      //test([0, 500], [100, 2000]);
      //test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      //test([100, 2000], [0, 500]);
      //test([100, 2000], [100, 2000], false);
      //test([100, 2000], [100, 100, 2000, 2000], false);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      //test([100, 100, 2000, 2000], [0, 500]);
      //test([100, 100, 2000, 2000], [100, 2000], false);
      //test([100, 100, 2000, 2000], [100, 100, 2000, 2000], false);
    });

    describe('R=1', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [1 1]
          R = A * B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0], false);
      test([0, 0], [0, 1], false);
      test([0, 0], [1, 1], false);
      test([0, 0], [0, 10], false);
      test([0, 0], [0, 0, 10, 10], false);
      test([0, 0], [1, 10], false);
      test([0, 0], [1, 1, 10, 10], false);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500], false);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0], false);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10], false);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10], false);
      test([0, 1], [3, 13], false);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000], false);
      test([0, 1], [100, 100, 2000, 2000], false);
      test([1, 1], [0, 0], false);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10], false);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0], false);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10], false);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10], false);
      test([0, 10], [3, 13], false);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000], false);
      test([0, 10], [100, 100, 2000, 2000], false);
      test([0, 0, 10, 10], [0, 0], false);
      test([0, 0, 10, 10], [0, 1], false);
      test([0, 0, 10, 10], [1, 1], false);
      test([0, 0, 10, 10], [0, 10], false);
      test([0, 0, 10, 10], [0, 0, 10, 10], false);
      test([0, 0, 10, 10], [1, 10], false);
      test([0, 0, 10, 10], [1, 1, 10, 10], false);
      test([0, 0, 10, 10], [10, 10], false);
      test([0, 0, 10, 10], [3, 13], false);
      test([0, 0, 10, 10], [0, 500], false);
      test([0, 0, 10, 10], [100, 2000], false);
      test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
      test([1, 10], [0, 0], false);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10], false);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10], false);
      test([1, 10], [3, 13], false);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0], false);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10], false);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10], false);
      test([1, 1, 10, 10], [3, 13], false);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1], false);
      test([10, 10], [1, 1], false);
      //test([10, 10], [0, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
      //test([10, 10], [0, 0, 10, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
      //test([10, 10], [1, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
      //test([10, 10], [1, 1, 10, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
      //test([10, 10], [10, 10], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
      //test([10, 10], [3, 13], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
      //test([10, 10], [0, 500], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
      //test([10, 10], [100, 2000], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
      //test([10, 10], [100, 100, 2000, 2000], false); // TOFIX: re-enable once FDO can deal with rejection-at-compile-time
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1], false);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10], false);
      test([3, 13], [0, 0, 10, 10], false);
      test([3, 13], [1, 10], false);
      test([3, 13], [1, 1, 10, 10], false);
      test([3, 13], [10, 10], false);
      test([3, 13], [3, 13], false);
      test([3, 13], [0, 500], false);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0], false);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10], false);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10], false);
      test([0, 500], [3, 13], false);
      //test([0, 500], [0, 500]);
      //test([0, 500], [100, 2000], false);
      //test([0, 500], [100, 100, 2000, 2000], false);
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1], false);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10], false);
      test([100, 2000], [0, 0, 10, 10], false);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      //test([100, 2000], [0, 500], false);
      //test([100, 2000], [100, 2000], false);
      //test([100, 2000], [100, 100, 2000, 2000], false);
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1], false);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10], false);
      test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      //test([100, 100, 2000, 2000], [0, 500], false);
      //test([100, 100, 2000, 2000], [100, 2000], false);
      //test([100, 100, 2000, 2000], [100, 100, 2000, 2000], false);
    });

    describe('R=[01]', function() {


      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 1]
          R = A * B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10]);
      test([0, 0], [3, 13]);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000]);
      test([0, 0], [100, 100, 2000, 2000]);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10]);
      test([0, 1], [3, 13]);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000]);
      test([0, 1], [100, 100, 2000, 2000]);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1]);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10]);
      test([1, 1], [1, 1, 10, 10]);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10]);
      test([0, 10], [3, 13]);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000]);
      test([0, 10], [100, 100, 2000, 2000]);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10]);
      test([0, 0, 10, 10], [3, 13]);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000]);
      test([0, 0, 10, 10], [100, 100, 2000, 2000]);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1]);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10]);
      test([1, 10], [1, 1, 10, 10]);
      test([1, 10], [10, 10], false);
      test([1, 10], [3, 13], false);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1]);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10]);
      test([1, 1, 10, 10], [1, 1, 10, 10]);
      test([1, 1, 10, 10], [10, 10], false);
      test([1, 1, 10, 10], [3, 13], false);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0]);
      test([10, 10], [0, 1]);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10]);
      test([10, 10], [0, 0, 10, 10]);
      test([10, 10], [1, 10], false);
      test([10, 10], [1, 1, 10, 10], false);
      test([10, 10], [10, 10], false);
      test([10, 10], [3, 13], false);
      test([10, 10], [0, 500]);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0]);
      test([3, 13], [0, 1]);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10]);
      test([3, 13], [0, 0, 10, 10]);
      test([3, 13], [1, 10], false);
      test([3, 13], [1, 1, 10, 10], false);
      test([3, 13], [10, 10], false);
      test([3, 13], [3, 13], false);
      test([3, 13], [0, 500]);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10]);
      test([0, 500], [3, 13]);
      //test([0, 500], [0, 500]);
      //test([0, 500], [100, 2000]);
      //test([0, 500], [100, 100, 2000, 2000]);
      test([100, 2000], [0, 0]);
      test([100, 2000], [0, 1]);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10]);
      test([100, 2000], [0, 0, 10, 10]);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      //test([100, 2000], [0, 500]);
      //test([100, 2000], [100, 2000], false);
      //test([100, 2000], [100, 100, 2000, 2000], false);
      test([100, 100, 2000, 2000], [0, 0]);
      test([100, 100, 2000, 2000], [0, 1]);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10]);
      test([100, 100, 2000, 2000], [0, 0, 10, 10]);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      //test([100, 100, 2000, 2000], [0, 500]);
      //test([100, 100, 2000, 2000], [100, 2000], false);
      //test([100, 100, 2000, 2000], [100, 100, 2000, 2000], false);
    });
  });

  describe('same', function() {

    function test(A, B, out) {
      let dsl = `
        : A [${A}]
        : B [${B}]
        A == B
      `;
      run(dsl, ['A', 'B'], out);
    }

    test([0, 0], [0, 0]);
    test([0, 0], [0, 1]);
    test([0, 0], [1, 1], false);
    test([0, 0], [0, 10]);
    test([0, 0], [0, 0, 10, 10]);
    test([0, 0], [1, 10], false);
    test([0, 0], [1, 1, 10, 10], false);
    test([0, 0], [10, 10], false);
    test([0, 0], [3, 13], false);
    test([0, 0], [0, 500]);
    test([0, 0], [100, 2000], false);
    test([0, 0], [100, 100, 2000, 2000], false);
    test([0, 1], [0, 0]);
    test([0, 1], [0, 1]);
    test([0, 1], [1, 1]);
    test([0, 1], [0, 10]);
    test([0, 1], [0, 0, 10, 10]);
    test([0, 1], [1, 10]);
    test([0, 1], [1, 1, 10, 10]);
    test([0, 1], [10, 10], false);
    test([0, 1], [3, 13], false);
    test([0, 1], [0, 500]);
    test([0, 1], [100, 2000], false);
    test([0, 1], [100, 100, 2000, 2000], false);
    test([1, 1], [0, 0], false);
    test([1, 1], [0, 1]);
    test([1, 1], [1, 1]);
    test([1, 1], [0, 10]);
    test([1, 1], [0, 0, 10, 10], false);
    test([1, 1], [1, 10]);
    test([1, 1], [1, 1, 10, 10]);
    test([1, 1], [10, 10], false);
    test([1, 1], [3, 13], false);
    test([1, 1], [0, 500]);
    test([1, 1], [100, 2000], false);
    test([1, 1], [100, 100, 2000, 2000], false);
    test([0, 10], [0, 0]);
    test([0, 10], [0, 1]);
    test([0, 10], [1, 1]);
    test([0, 10], [0, 10]);
    test([0, 10], [0, 0, 10, 10]);
    test([0, 10], [1, 10]);
    test([0, 10], [1, 1, 10, 10]);
    test([0, 10], [10, 10]);
    test([0, 10], [3, 13]);
    test([0, 10], [0, 500]);
    test([0, 10], [100, 2000], false);
    test([0, 10], [100, 100, 2000, 2000], false);
    test([0, 0, 10, 10], [0, 0]);
    test([0, 0, 10, 10], [0, 1]);
    test([0, 0, 10, 10], [1, 1], false);
    test([0, 0, 10, 10], [0, 10]);
    test([0, 0, 10, 10], [0, 0, 10, 10]);
    test([0, 0, 10, 10], [1, 10]);
    test([0, 0, 10, 10], [1, 1, 10, 10]);
    test([0, 0, 10, 10], [10, 10]);
    test([0, 0, 10, 10], [3, 13]);
    test([0, 0, 10, 10], [0, 500]);
    test([0, 0, 10, 10], [100, 2000], false);
    test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
    test([1, 10], [0, 0], false);
    test([1, 10], [0, 1]);
    test([1, 10], [1, 1]);
    test([1, 10], [0, 10]);
    test([1, 10], [0, 0, 10, 10]);
    test([1, 10], [1, 10]);
    test([1, 10], [1, 1, 10, 10]);
    test([1, 10], [10, 10]);
    test([1, 10], [3, 13]);
    test([1, 10], [0, 500]);
    test([1, 10], [100, 2000], false);
    test([1, 10], [100, 100, 2000, 2000], false);
    test([1, 1, 10, 10], [0, 0], false);
    test([1, 1, 10, 10], [0, 1]);
    test([1, 1, 10, 10], [1, 1]);
    test([1, 1, 10, 10], [0, 10]);
    test([1, 1, 10, 10], [0, 0, 10, 10]);
    test([1, 1, 10, 10], [1, 10]);
    test([1, 1, 10, 10], [1, 1, 10, 10]);
    test([1, 1, 10, 10], [10, 10]);
    test([1, 1, 10, 10], [3, 13]);
    test([1, 1, 10, 10], [0, 500]);
    test([1, 1, 10, 10], [100, 2000], false);
    test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
    test([10, 10], [0, 0], false);
    test([10, 10], [0, 1], false);
    test([10, 10], [1, 1], false);
    test([10, 10], [0, 10]);
    test([10, 10], [0, 0, 10, 10]);
    test([10, 10], [1, 10]);
    test([10, 10], [1, 1, 10, 10]);
    test([10, 10], [10, 10]);
    test([10, 10], [3, 13]);
    test([10, 10], [0, 500]);
    test([10, 10], [100, 2000], false);
    test([10, 10], [100, 100, 2000, 2000], false);
    test([3, 13], [0, 0], false);
    test([3, 13], [0, 1], false);
    test([3, 13], [1, 1], false);
    test([3, 13], [0, 10]);
    test([3, 13], [0, 0, 10, 10]);
    test([3, 13], [1, 10]);
    test([3, 13], [1, 1, 10, 10]);
    test([3, 13], [10, 10]);
    test([3, 13], [3, 13]);
    test([3, 13], [0, 500]);
    test([3, 13], [100, 2000], false);
    test([3, 13], [100, 100, 2000, 2000], false);
    test([0, 500], [0, 0]);
    test([0, 500], [0, 1]);
    test([0, 500], [1, 1]);
    test([0, 500], [0, 10]);
    test([0, 500], [0, 0, 10, 10]);
    test([0, 500], [1, 10]);
    test([0, 500], [1, 1, 10, 10]);
    test([0, 500], [10, 10]);
    test([0, 500], [3, 13]);
    test([0, 500], [0, 500]);
    test([0, 500], [100, 2000]);
    test([0, 500], [100, 100, 2000, 2000]);
    test([100, 2000], [0, 0], false);
    test([100, 2000], [0, 1], false);
    test([100, 2000], [1, 1], false);
    test([100, 2000], [0, 10], false);
    test([100, 2000], [0, 0, 10, 10], false);
    test([100, 2000], [1, 10], false);
    test([100, 2000], [1, 1, 10, 10], false);
    test([100, 2000], [10, 10], false);
    test([100, 2000], [3, 13], false);
    test([100, 2000], [0, 500]);
    test([100, 2000], [100, 2000]);
    test([100, 2000], [100, 100, 2000, 2000]);
    test([100, 100, 2000, 2000], [0, 0], false);
    test([100, 100, 2000, 2000], [0, 1], false);
    test([100, 100, 2000, 2000], [1, 1], false);
    test([100, 100, 2000, 2000], [0, 10], false);
    test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
    test([100, 100, 2000, 2000], [1, 10], false);
    test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
    test([100, 100, 2000, 2000], [10, 10], false);
    test([100, 100, 2000, 2000], [3, 13], false);
    test([100, 100, 2000, 2000], [0, 500]);
    test([100, 100, 2000, 2000], [100, 2000]);
    test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
  });

  describe('some', function() {


    function test(A, B, out) {
      // A or B must be nonzero, could be both
      let dsl = `
        : A [${A}]
        : B [${B}]
        A | B
      `;
      run(dsl, ['A', 'B'], out);
    }

    test([0, 0], [0, 0], false);
    test([0, 0], [0, 1]);
    test([0, 0], [1, 1]);
    test([0, 0], [0, 10]);
    test([0, 0], [0, 0, 10, 10]);
    test([0, 0], [1, 10]);
    test([0, 0], [1, 1, 10, 10]);
    test([0, 0], [10, 10]);
    test([0, 0], [3, 13]);
    test([0, 0], [0, 500]);
    test([0, 0], [100, 2000]);
    test([0, 0], [100, 100, 2000, 2000]);
    test([0, 1], [0, 0]);
    test([0, 1], [0, 1]);
    test([0, 1], [1, 1]);
    test([0, 1], [0, 10]);
    test([0, 1], [0, 0, 10, 10]);
    test([0, 1], [1, 10]);
    test([0, 1], [1, 1, 10, 10]);
    test([0, 1], [10, 10]);
    test([0, 1], [3, 13]);
    test([0, 1], [0, 500]);
    test([0, 1], [100, 2000]);
    test([0, 1], [100, 100, 2000, 2000]);
    test([1, 1], [0, 0]);
    test([1, 1], [0, 1]);
    test([1, 1], [1, 1]);
    test([1, 1], [0, 10]);
    test([1, 1], [0, 0, 10, 10]);
    test([1, 1], [1, 10]);
    test([1, 1], [1, 1, 10, 10]);
    test([1, 1], [10, 10]);
    test([1, 1], [3, 13]);
    test([1, 1], [0, 500]);
    test([1, 1], [100, 2000]);
    test([1, 1], [100, 100, 2000, 2000]);
    test([0, 10], [0, 0]);
    test([0, 10], [0, 1]);
    test([0, 10], [1, 1]);
    test([0, 10], [0, 10]);
    test([0, 10], [0, 0, 10, 10]);
    test([0, 10], [1, 10]);
    test([0, 10], [1, 1, 10, 10]);
    test([0, 10], [10, 10]);
    test([0, 10], [3, 13]);
    test([0, 10], [0, 500]);
    test([0, 10], [100, 2000]);
    test([0, 10], [100, 100, 2000, 2000]);
    test([0, 0, 10, 10], [0, 0]);
    test([0, 0, 10, 10], [0, 1]);
    test([0, 0, 10, 10], [1, 1]);
    test([0, 0, 10, 10], [0, 10]);
    test([0, 0, 10, 10], [0, 0, 10, 10]);
    test([0, 0, 10, 10], [1, 10]);
    test([0, 0, 10, 10], [1, 1, 10, 10]);
    test([0, 0, 10, 10], [10, 10]);
    test([0, 0, 10, 10], [3, 13]);
    test([0, 0, 10, 10], [0, 500]);
    test([0, 0, 10, 10], [100, 2000]);
    test([0, 0, 10, 10], [100, 100, 2000, 2000]);
    test([1, 10], [0, 0]);
    test([1, 10], [0, 1]);
    test([1, 10], [1, 1]);
    test([1, 10], [0, 10]);
    test([1, 10], [0, 0, 10, 10]);
    test([1, 10], [1, 10]);
    test([1, 10], [1, 1, 10, 10]);
    test([1, 10], [10, 10]);
    test([1, 10], [3, 13]);
    test([1, 10], [0, 500]);
    test([1, 10], [100, 2000]);
    test([1, 10], [100, 100, 2000, 2000]);
    test([1, 1, 10, 10], [0, 0]);
    test([1, 1, 10, 10], [0, 1]);
    test([1, 1, 10, 10], [1, 1]);
    test([1, 1, 10, 10], [0, 10]);
    test([1, 1, 10, 10], [0, 0, 10, 10]);
    test([1, 1, 10, 10], [1, 10]);
    test([1, 1, 10, 10], [1, 1, 10, 10]);
    test([1, 1, 10, 10], [10, 10]);
    test([1, 1, 10, 10], [3, 13]);
    test([1, 1, 10, 10], [0, 500]);
    test([1, 1, 10, 10], [100, 2000]);
    test([1, 1, 10, 10], [100, 100, 2000, 2000]);
    test([10, 10], [0, 0]);
    test([10, 10], [0, 1]);
    test([10, 10], [1, 1]);
    test([10, 10], [0, 10]);
    test([10, 10], [0, 0, 10, 10]);
    test([10, 10], [1, 10]);
    test([10, 10], [1, 1, 10, 10]);
    test([10, 10], [10, 10]);
    test([10, 10], [3, 13]);
    test([10, 10], [0, 500]);
    test([10, 10], [100, 2000]);
    test([10, 10], [100, 100, 2000, 2000]);
    test([3, 13], [0, 0]);
    test([3, 13], [0, 1]);
    test([3, 13], [1, 1]);
    test([3, 13], [0, 10]);
    test([3, 13], [0, 0, 10, 10]);
    test([3, 13], [1, 10]);
    test([3, 13], [1, 1, 10, 10]);
    test([3, 13], [10, 10]);
    test([3, 13], [3, 13]);
    test([3, 13], [0, 500]);
    test([3, 13], [100, 2000]);
    test([3, 13], [100, 100, 2000, 2000]);
    test([0, 500], [0, 0]);
    test([0, 500], [0, 1]);
    test([0, 500], [1, 1]);
    test([0, 500], [0, 10]);
    test([0, 500], [0, 0, 10, 10]);
    test([0, 500], [1, 10]);
    test([0, 500], [1, 1, 10, 10]);
    test([0, 500], [10, 10]);
    test([0, 500], [3, 13]);
    test([0, 500], [0, 500]);
    test([0, 500], [100, 2000]);
    test([0, 500], [100, 100, 2000, 2000]);
    test([100, 2000], [0, 0]);
    test([100, 2000], [0, 1]);
    test([100, 2000], [1, 1]);
    test([100, 2000], [0, 10]);
    test([100, 2000], [0, 0, 10, 10]);
    test([100, 2000], [1, 10]);
    test([100, 2000], [1, 1, 10, 10]);
    test([100, 2000], [10, 10]);
    test([100, 2000], [3, 13]);
    test([100, 2000], [0, 500]);
    test([100, 2000], [100, 2000]);
    test([100, 2000], [100, 100, 2000, 2000]);
    test([100, 100, 2000, 2000], [0, 0]);
    test([100, 100, 2000, 2000], [0, 1]);
    test([100, 100, 2000, 2000], [1, 1]);
    test([100, 100, 2000, 2000], [0, 10]);
    test([100, 100, 2000, 2000], [0, 0, 10, 10]);
    test([100, 100, 2000, 2000], [1, 10]);
    test([100, 100, 2000, 2000], [1, 1, 10, 10]);
    test([100, 100, 2000, 2000], [10, 10]);
    test([100, 100, 2000, 2000], [3, 13]);
    test([100, 100, 2000, 2000], [0, 500]);
    test([100, 100, 2000, 2000], [100, 2000]);
    test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
  });

  describe('sum', function() {

    // some of [0,500], [100,2000], [100,100,2000,2000] are disabled because they
    // simply take too long as FD will brute force them before bailing anyways.

    describe('R=0', function() {

      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 0]
          R = A + B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1], false);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10], false);
      test([0, 0], [1, 1, 10, 10], false);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1], false);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10], false);
      test([0, 1], [1, 1, 10, 10], false);
      test([0, 1], [10, 10], false);
      test([0, 1], [3, 13], false);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000], false);
      test([0, 1], [100, 100, 2000, 2000], false);
      test([1, 1], [0, 0], false);
      test([1, 1], [0, 1], false);
      test([1, 1], [1, 1], false);
      test([1, 1], [0, 10], false);
      test([1, 1], [0, 0, 10, 10], false);
      test([1, 1], [1, 10], false);
      test([1, 1], [1, 1, 10, 10], false);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500], false);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1], false);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10], false);
      test([0, 10], [1, 1, 10, 10], false);
      test([0, 10], [10, 10], false);
      test([0, 10], [3, 13], false);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000], false);
      test([0, 10], [100, 100, 2000, 2000], false);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1], false);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10], false);
      test([0, 0, 10, 10], [1, 1, 10, 10], false);
      test([0, 0, 10, 10], [10, 10], false);
      test([0, 0, 10, 10], [3, 13], false);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000], false);
      test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
      test([1, 10], [0, 0], false);
      test([1, 10], [0, 1], false);
      test([1, 10], [1, 1], false);
      test([1, 10], [0, 10], false);
      test([1, 10], [0, 0, 10, 10], false);
      test([1, 10], [1, 10], false);
      test([1, 10], [1, 1, 10, 10], false);
      test([1, 10], [10, 10], false);
      test([1, 10], [3, 13], false);
      test([1, 10], [0, 500], false);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0], false);
      test([1, 1, 10, 10], [0, 1], false);
      test([1, 1, 10, 10], [1, 1], false);
      test([1, 1, 10, 10], [0, 10], false);
      test([1, 1, 10, 10], [0, 0, 10, 10], false);
      test([1, 1, 10, 10], [1, 10], false);
      test([1, 1, 10, 10], [1, 1, 10, 10], false);
      test([1, 1, 10, 10], [10, 10], false);
      test([1, 1, 10, 10], [3, 13], false);
      test([1, 1, 10, 10], [0, 500], false);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1], false);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10], false);
      test([10, 10], [0, 0, 10, 10], false);
      test([10, 10], [1, 10], false);
      test([10, 10], [1, 1, 10, 10], false);
      test([10, 10], [10, 10], false);
      test([10, 10], [3, 13], false);
      test([10, 10], [0, 500], false);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1], false);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10], false);
      test([3, 13], [0, 0, 10, 10], false);
      test([3, 13], [1, 10], false);
      test([3, 13], [1, 1, 10, 10], false);
      test([3, 13], [10, 10], false);
      test([3, 13], [3, 13], false);
      test([3, 13], [0, 500], false);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1], false);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10], false);
      test([0, 500], [1, 1, 10, 10], false);
      test([0, 500], [10, 10], false);
      test([0, 500], [3, 13], false);
      //test([0, 500], [0, 500]);
      //test([0, 500], [100, 2000], false);
      //test([0, 500], [100, 100, 2000, 2000], false);
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1], false);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10], false);
      test([100, 2000], [0, 0, 10, 10], false);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      //test([100, 2000], [0, 500], false);
      //test([100, 2000], [100, 2000], false);
      //test([100, 2000], [100, 100, 2000, 2000], false);
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1], false);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10], false);
      test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      //test([100, 100, 2000, 2000], [0, 500], false);
      //test([100, 100, 2000, 2000], [100, 2000], false);
      //test([100, 100, 2000, 2000], [100, 100, 2000, 2000], false);
    });

    describe('R=1', function() {

      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [1 1]
          R = A + B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0], false);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10], false);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10], false);
      test([0, 1], [3, 13], false);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000], false);
      test([0, 1], [100, 100, 2000, 2000], false);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1], false);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10], false);
      test([1, 1], [1, 1, 10, 10], false);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10], false);
      test([0, 10], [3, 13], false);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000], false);
      test([0, 10], [100, 100, 2000, 2000], false);
      test([0, 0, 10, 10], [0, 0], false);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10], false);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10], false);
      test([0, 0, 10, 10], [3, 13], false);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000], false);
      test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1], false);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10], false);
      test([1, 10], [1, 1, 10, 10], false);
      test([1, 10], [10, 10], false);
      test([1, 10], [3, 13], false);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1], false);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10], false);
      test([1, 1, 10, 10], [1, 1, 10, 10], false);
      test([1, 1, 10, 10], [10, 10], false);
      test([1, 1, 10, 10], [3, 13], false);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1], false);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10], false);
      test([10, 10], [0, 0, 10, 10], false);
      test([10, 10], [1, 10], false);
      test([10, 10], [1, 1, 10, 10], false);
      test([10, 10], [10, 10], false);
      test([10, 10], [3, 13], false);
      test([10, 10], [0, 500], false);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1], false);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10], false);
      test([3, 13], [0, 0, 10, 10], false);
      test([3, 13], [1, 10], false);
      test([3, 13], [1, 1, 10, 10], false);
      test([3, 13], [10, 10], false);
      test([3, 13], [3, 13], false);
      test([3, 13], [0, 500], false);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10], false);
      test([0, 500], [3, 13], false);
      //test([0, 500], [0, 500]);
      //test([0, 500], [100, 2000], false);
      //test([0, 500], [100, 100, 2000, 2000], false);
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1], false);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10], false);
      test([100, 2000], [0, 0, 10, 10], false);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      //test([100, 2000], [0, 500], false);
      //test([100, 2000], [100, 2000], false);
      //test([100, 2000], [100, 100, 2000, 2000], false);
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1], false);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10], false);
      test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      //test([100, 100, 2000, 2000], [0, 500], false);
      //test([100, 100, 2000, 2000], [100, 2000], false);
      //test([100, 100, 2000, 2000], [100, 100, 2000, 2000], false);
    });

    describe('R=[01]', function() {

      function test(A, B, out) {
        let dsl = `
          : A [${A}]
          : B [${B}]
          : R [0 1]
          R = A + B
        `;
        run(dsl, ['A', 'B', 'R'], out);
      }

      test([0, 0], [0, 0]);
      test([0, 0], [0, 1]);
      test([0, 0], [1, 1]);
      test([0, 0], [0, 10]);
      test([0, 0], [0, 0, 10, 10]);
      test([0, 0], [1, 10]);
      test([0, 0], [1, 1, 10, 10]);
      test([0, 0], [10, 10], false);
      test([0, 0], [3, 13], false);
      test([0, 0], [0, 500]);
      test([0, 0], [100, 2000], false);
      test([0, 0], [100, 100, 2000, 2000], false);
      test([0, 1], [0, 0]);
      test([0, 1], [0, 1]);
      test([0, 1], [1, 1]);
      test([0, 1], [0, 10]);
      test([0, 1], [0, 0, 10, 10]);
      test([0, 1], [1, 10]);
      test([0, 1], [1, 1, 10, 10]);
      test([0, 1], [10, 10], false);
      test([0, 1], [3, 13], false);
      test([0, 1], [0, 500]);
      test([0, 1], [100, 2000], false);
      test([0, 1], [100, 100, 2000, 2000], false);
      test([1, 1], [0, 0]);
      test([1, 1], [0, 1]);
      test([1, 1], [1, 1], false);
      test([1, 1], [0, 10]);
      test([1, 1], [0, 0, 10, 10]);
      test([1, 1], [1, 10], false);
      test([1, 1], [1, 1, 10, 10], false);
      test([1, 1], [10, 10], false);
      test([1, 1], [3, 13], false);
      test([1, 1], [0, 500]);
      test([1, 1], [100, 2000], false);
      test([1, 1], [100, 100, 2000, 2000], false);
      test([0, 10], [0, 0]);
      test([0, 10], [0, 1]);
      test([0, 10], [1, 1]);
      test([0, 10], [0, 10]);
      test([0, 10], [0, 0, 10, 10]);
      test([0, 10], [1, 10]);
      test([0, 10], [1, 1, 10, 10]);
      test([0, 10], [10, 10], false);
      test([0, 10], [3, 13], false);
      test([0, 10], [0, 500]);
      test([0, 10], [100, 2000], false);
      test([0, 10], [100, 100, 2000, 2000], false);
      test([0, 0, 10, 10], [0, 0]);
      test([0, 0, 10, 10], [0, 1]);
      test([0, 0, 10, 10], [1, 1]);
      test([0, 0, 10, 10], [0, 10]);
      test([0, 0, 10, 10], [0, 0, 10, 10]);
      test([0, 0, 10, 10], [1, 10]);
      test([0, 0, 10, 10], [1, 1, 10, 10]);
      test([0, 0, 10, 10], [10, 10], false);
      test([0, 0, 10, 10], [3, 13], false);
      test([0, 0, 10, 10], [0, 500]);
      test([0, 0, 10, 10], [100, 2000], false);
      test([0, 0, 10, 10], [100, 100, 2000, 2000], false);
      test([1, 10], [0, 0]);
      test([1, 10], [0, 1]);
      test([1, 10], [1, 1], false);
      test([1, 10], [0, 10]);
      test([1, 10], [0, 0, 10, 10]);
      test([1, 10], [1, 10], false);
      test([1, 10], [1, 1, 10, 10], false);
      test([1, 10], [10, 10], false);
      test([1, 10], [3, 13], false);
      test([1, 10], [0, 500]);
      test([1, 10], [100, 2000], false);
      test([1, 10], [100, 100, 2000, 2000], false);
      test([1, 1, 10, 10], [0, 0]);
      test([1, 1, 10, 10], [0, 1]);
      test([1, 1, 10, 10], [1, 1], false);
      test([1, 1, 10, 10], [0, 10]);
      test([1, 1, 10, 10], [0, 0, 10, 10]);
      test([1, 1, 10, 10], [1, 10], false);
      test([1, 1, 10, 10], [1, 1, 10, 10], false);
      test([1, 1, 10, 10], [10, 10], false);
      test([1, 1, 10, 10], [3, 13], false);
      test([1, 1, 10, 10], [0, 500]);
      test([1, 1, 10, 10], [100, 2000], false);
      test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
      test([10, 10], [0, 0], false);
      test([10, 10], [0, 1], false);
      test([10, 10], [1, 1], false);
      test([10, 10], [0, 10], false);
      test([10, 10], [0, 0, 10, 10], false);
      test([10, 10], [1, 10], false);
      test([10, 10], [1, 1, 10, 10], false);
      test([10, 10], [10, 10], false);
      test([10, 10], [3, 13], false);
      test([10, 10], [0, 500], false);
      test([10, 10], [100, 2000], false);
      test([10, 10], [100, 100, 2000, 2000], false);
      test([3, 13], [0, 0], false);
      test([3, 13], [0, 1], false);
      test([3, 13], [1, 1], false);
      test([3, 13], [0, 10], false);
      test([3, 13], [0, 0, 10, 10], false);
      test([3, 13], [1, 10], false);
      test([3, 13], [1, 1, 10, 10], false);
      test([3, 13], [10, 10], false);
      test([3, 13], [3, 13], false);
      test([3, 13], [0, 500], false);
      test([3, 13], [100, 2000], false);
      test([3, 13], [100, 100, 2000, 2000], false);
      test([0, 500], [0, 0]);
      test([0, 500], [0, 1]);
      test([0, 500], [1, 1]);
      test([0, 500], [0, 10]);
      test([0, 500], [0, 0, 10, 10]);
      test([0, 500], [1, 10]);
      test([0, 500], [1, 1, 10, 10]);
      test([0, 500], [10, 10], false);
      test([0, 500], [3, 13], false);
      //test([0, 500], [0, 500]);
      //test([0, 500], [100, 2000], false);
      //test([0, 500], [100, 100, 2000, 2000], false);
      test([100, 2000], [0, 0], false);
      test([100, 2000], [0, 1], false);
      test([100, 2000], [1, 1], false);
      test([100, 2000], [0, 10], false);
      test([100, 2000], [0, 0, 10, 10], false);
      test([100, 2000], [1, 10], false);
      test([100, 2000], [1, 1, 10, 10], false);
      test([100, 2000], [10, 10], false);
      test([100, 2000], [3, 13], false);
      //test([100, 2000], [0, 500], false);
      //test([100, 2000], [100, 2000], false);
      //test([100, 2000], [100, 100, 2000, 2000], false);
      test([100, 100, 2000, 2000], [0, 0], false);
      test([100, 100, 2000, 2000], [0, 1], false);
      test([100, 100, 2000, 2000], [1, 1], false);
      test([100, 100, 2000, 2000], [0, 10], false);
      test([100, 100, 2000, 2000], [0, 0, 10, 10], false);
      test([100, 100, 2000, 2000], [1, 10], false);
      test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
      test([100, 100, 2000, 2000], [10, 10], false);
      test([100, 100, 2000, 2000], [3, 13], false);
      //test([100, 100, 2000, 2000], [0, 500], false);
      //test([100, 100, 2000, 2000], [100, 2000], false);
      //test([100, 100, 2000, 2000], [100, 100, 2000, 2000], false);
    });
  });

  describe('xnor', function() {


    function test(A, B, out) {
      // either A and B are both zero or A and B are both nonzero
      let dsl = `
        : A [${A}]
        : B [${B}]
        A !^ B
      `;
      run(dsl, ['A', 'B'], out);
    }

    test([0, 0], [0, 0]);
    test([0, 0], [0, 1]);
    test([0, 0], [1, 1], false);
    test([0, 0], [0, 10]);
    test([0, 0], [0, 0, 10, 10]);
    test([0, 0], [1, 10], false);
    test([0, 0], [1, 1, 10, 10], false);
    test([0, 0], [10, 10], false);
    test([0, 0], [3, 13], false);
    test([0, 0], [0, 500]);
    test([0, 0], [100, 2000], false);
    test([0, 0], [100, 100, 2000, 2000], false);
    test([0, 1], [0, 0]);
    test([0, 1], [0, 1]);
    test([0, 1], [1, 1]);
    test([0, 1], [0, 10]);
    test([0, 1], [0, 0, 10, 10]);
    test([0, 1], [1, 10]);
    test([0, 1], [1, 1, 10, 10]);
    test([0, 1], [10, 10]);
    test([0, 1], [3, 13]);
    test([0, 1], [0, 500]);
    test([0, 1], [100, 2000]);
    test([0, 1], [100, 100, 2000, 2000]);
    test([1, 1], [0, 0], false);
    test([1, 1], [0, 1]);
    test([1, 1], [1, 1]);
    test([1, 1], [0, 10]);
    test([1, 1], [0, 0, 10, 10]);
    test([1, 1], [1, 10]);
    test([1, 1], [1, 1, 10, 10]);
    test([1, 1], [10, 10]);
    test([1, 1], [3, 13]);
    test([1, 1], [0, 500]);
    test([1, 1], [100, 2000]);
    test([1, 1], [100, 100, 2000, 2000]);
    test([0, 10], [0, 0]);
    test([0, 10], [0, 1]);
    test([0, 10], [1, 1]);
    test([0, 10], [0, 10]);
    test([0, 10], [0, 0, 10, 10]);
    test([0, 10], [1, 10]);
    test([0, 10], [1, 1, 10, 10]);
    test([0, 10], [10, 10]);
    test([0, 10], [3, 13]);
    test([0, 10], [0, 500]);
    test([0, 10], [100, 2000]);
    test([0, 10], [100, 100, 2000, 2000]);
    test([0, 0, 10, 10], [0, 0]);
    test([0, 0, 10, 10], [0, 1]);
    test([0, 0, 10, 10], [1, 1]);
    test([0, 0, 10, 10], [0, 10]);
    test([0, 0, 10, 10], [0, 0, 10, 10]);
    test([0, 0, 10, 10], [1, 10]);
    test([0, 0, 10, 10], [1, 1, 10, 10]);
    test([0, 0, 10, 10], [10, 10]);
    test([0, 0, 10, 10], [3, 13]);
    test([0, 0, 10, 10], [0, 500]);
    test([0, 0, 10, 10], [100, 2000]);
    test([0, 0, 10, 10], [100, 100, 2000, 2000]);
    test([1, 10], [0, 0], false);
    test([1, 10], [0, 1]);
    test([1, 10], [1, 1]);
    test([1, 10], [0, 10]);
    test([1, 10], [0, 0, 10, 10]);
    test([1, 10], [1, 10]);
    test([1, 10], [1, 1, 10, 10]);
    test([1, 10], [10, 10]);
    test([1, 10], [3, 13]);
    test([1, 10], [0, 500]);
    test([1, 10], [100, 2000]);
    test([1, 10], [100, 100, 2000, 2000]);
    test([1, 1, 10, 10], [0, 0], false);
    test([1, 1, 10, 10], [0, 1]);
    test([1, 1, 10, 10], [1, 1]);
    test([1, 1, 10, 10], [0, 10]);
    test([1, 1, 10, 10], [0, 0, 10, 10]);
    test([1, 1, 10, 10], [1, 10]);
    test([1, 1, 10, 10], [1, 1, 10, 10]);
    test([1, 1, 10, 10], [10, 10]);
    test([1, 1, 10, 10], [3, 13]);
    test([1, 1, 10, 10], [0, 500]);
    test([1, 1, 10, 10], [100, 2000]);
    test([1, 1, 10, 10], [100, 100, 2000, 2000]);
    test([10, 10], [0, 0], false);
    test([10, 10], [0, 1]);
    test([10, 10], [1, 1]);
    test([10, 10], [0, 10]);
    test([10, 10], [0, 0, 10, 10]);
    test([10, 10], [1, 10]);
    test([10, 10], [1, 1, 10, 10]);
    test([10, 10], [10, 10]);
    test([10, 10], [3, 13]);
    test([10, 10], [0, 500]);
    test([10, 10], [100, 2000]);
    test([10, 10], [100, 100, 2000, 2000]);
    test([3, 13], [0, 0], false);
    test([3, 13], [0, 1]);
    test([3, 13], [1, 1]);
    test([3, 13], [0, 10]);
    test([3, 13], [0, 0, 10, 10]);
    test([3, 13], [1, 10]);
    test([3, 13], [1, 1, 10, 10]);
    test([3, 13], [10, 10]);
    test([3, 13], [3, 13]);
    test([3, 13], [0, 500]);
    test([3, 13], [100, 2000]);
    test([3, 13], [100, 100, 2000, 2000]);
    test([0, 500], [0, 0]);
    test([0, 500], [0, 1]);
    test([0, 500], [1, 1]);
    test([0, 500], [0, 10]);
    test([0, 500], [0, 0, 10, 10]);
    test([0, 500], [1, 10]);
    test([0, 500], [1, 1, 10, 10]);
    test([0, 500], [10, 10]);
    test([0, 500], [3, 13]);
    test([0, 500], [0, 500]);
    test([0, 500], [100, 2000]);
    test([0, 500], [100, 100, 2000, 2000]);
    test([100, 2000], [0, 0], false);
    test([100, 2000], [0, 1]);
    test([100, 2000], [1, 1]);
    test([100, 2000], [0, 10]);
    test([100, 2000], [0, 0, 10, 10]);
    test([100, 2000], [1, 10]);
    test([100, 2000], [1, 1, 10, 10]);
    test([100, 2000], [10, 10]);
    test([100, 2000], [3, 13]);
    test([100, 2000], [0, 500]);
    test([100, 2000], [100, 2000]);
    test([100, 2000], [100, 100, 2000, 2000]);
    test([100, 100, 2000, 2000], [0, 0], false);
    test([100, 100, 2000, 2000], [0, 1]);
    test([100, 100, 2000, 2000], [1, 1]);
    test([100, 100, 2000, 2000], [0, 10]);
    test([100, 100, 2000, 2000], [0, 0, 10, 10]);
    test([100, 100, 2000, 2000], [1, 10]);
    test([100, 100, 2000, 2000], [1, 1, 10, 10]);
    test([100, 100, 2000, 2000], [10, 10]);
    test([100, 100, 2000, 2000], [3, 13]);
    test([100, 100, 2000, 2000], [0, 500]);
    test([100, 100, 2000, 2000], [100, 2000]);
    test([100, 100, 2000, 2000], [100, 100, 2000, 2000]);
  });

  describe('xor', function() {

    function test(A, B, out) {
      // either A is zero and B is nonzero, or A is nonzero and B is zero
      let dsl = `
        : A [${A}]
        : B [${B}]
        A ^ B
      `;
      run(dsl, ['A', 'B'], out);
    }

    test([0, 0], [0, 0], false);
    test([0, 0], [0, 1]);
    test([0, 0], [1, 1]);
    test([0, 0], [0, 10]);
    test([0, 0], [0, 0, 10, 10]);
    test([0, 0], [1, 10]);
    test([0, 0], [1, 1, 10, 10]);
    test([0, 0], [10, 10]);
    test([0, 0], [3, 13]);
    test([0, 0], [0, 500]);
    test([0, 0], [100, 2000]);
    test([0, 0], [100, 100, 2000, 2000]);
    test([0, 1], [0, 0]);
    test([0, 1], [0, 1]);
    test([0, 1], [1, 1]);
    test([0, 1], [0, 10]);
    test([0, 1], [0, 0, 10, 10]);
    test([0, 1], [1, 10]);
    test([0, 1], [1, 1, 10, 10]);
    test([0, 1], [10, 10]);
    test([0, 1], [3, 13]);
    test([0, 1], [0, 500]);
    test([0, 1], [100, 2000]);
    test([0, 1], [100, 100, 2000, 2000]);
    test([1, 1], [0, 0]);
    test([1, 1], [0, 1]);
    test([1, 1], [1, 1], false);
    test([1, 1], [0, 10]);
    test([1, 1], [0, 0, 10, 10]);
    test([1, 1], [1, 10], false);
    test([1, 1], [1, 1, 10, 10], false);
    test([1, 1], [10, 10], false);
    test([1, 1], [3, 13], false);
    test([1, 1], [0, 500]);
    test([1, 1], [100, 2000], false);
    test([1, 1], [100, 100, 2000, 2000], false);
    test([0, 10], [0, 0]);
    test([0, 10], [0, 1]);
    test([0, 10], [1, 1]);
    test([0, 10], [0, 10]);
    test([0, 10], [0, 0, 10, 10]);
    test([0, 10], [1, 10]);
    test([0, 10], [1, 1, 10, 10]);
    test([0, 10], [10, 10]);
    test([0, 10], [3, 13]);
    test([0, 10], [0, 500]);
    test([0, 10], [100, 2000]);
    test([0, 10], [100, 100, 2000, 2000]);
    test([0, 0, 10, 10], [0, 0]);
    test([0, 0, 10, 10], [0, 1]);
    test([0, 0, 10, 10], [1, 1]);
    test([0, 0, 10, 10], [0, 10]);
    test([0, 0, 10, 10], [0, 0, 10, 10]);
    test([0, 0, 10, 10], [1, 10]);
    test([0, 0, 10, 10], [1, 1, 10, 10]);
    test([0, 0, 10, 10], [10, 10]);
    test([0, 0, 10, 10], [3, 13]);
    test([0, 0, 10, 10], [0, 500]);
    test([0, 0, 10, 10], [100, 2000]);
    test([0, 0, 10, 10], [100, 100, 2000, 2000]);
    test([1, 10], [0, 0]);
    test([1, 10], [0, 1]);
    test([1, 10], [1, 1], false);
    test([1, 10], [0, 10]);
    test([1, 10], [0, 0, 10, 10]);
    test([1, 10], [1, 10], false);
    test([1, 10], [1, 1, 10, 10], false);
    test([1, 10], [10, 10], false);
    test([1, 10], [3, 13], false);
    test([1, 10], [0, 500]);
    test([1, 10], [100, 2000], false);
    test([1, 10], [100, 100, 2000, 2000], false);
    test([1, 1, 10, 10], [0, 0]);
    test([1, 1, 10, 10], [0, 1]);
    test([1, 1, 10, 10], [1, 1], false);
    test([1, 1, 10, 10], [0, 10]);
    test([1, 1, 10, 10], [0, 0, 10, 10]);
    test([1, 1, 10, 10], [1, 10], false);
    test([1, 1, 10, 10], [1, 1, 10, 10], false);
    test([1, 1, 10, 10], [10, 10], false);
    test([1, 1, 10, 10], [3, 13], false);
    test([1, 1, 10, 10], [0, 500]);
    test([1, 1, 10, 10], [100, 2000], false);
    test([1, 1, 10, 10], [100, 100, 2000, 2000], false);
    test([10, 10], [0, 0]);
    test([10, 10], [0, 1]);
    test([10, 10], [1, 1], false);
    test([10, 10], [0, 10]);
    test([10, 10], [0, 0, 10, 10]);
    test([10, 10], [1, 10], false);
    test([10, 10], [1, 1, 10, 10], false);
    test([10, 10], [10, 10], false);
    test([10, 10], [3, 13], false);
    test([10, 10], [0, 500]);
    test([10, 10], [100, 2000], false);
    test([10, 10], [100, 100, 2000, 2000], false);
    test([3, 13], [0, 0]);
    test([3, 13], [0, 1]);
    test([3, 13], [1, 1], false);
    test([3, 13], [0, 10]);
    test([3, 13], [0, 0, 10, 10]);
    test([3, 13], [1, 10], false);
    test([3, 13], [1, 1, 10, 10], false);
    test([3, 13], [10, 10], false);
    test([3, 13], [3, 13], false);
    test([3, 13], [0, 500]);
    test([3, 13], [100, 2000], false);
    test([3, 13], [100, 100, 2000, 2000], false);
    test([0, 500], [0, 0]);
    test([0, 500], [0, 1]);
    test([0, 500], [1, 1]);
    test([0, 500], [0, 10]);
    test([0, 500], [0, 0, 10, 10]);
    test([0, 500], [1, 10]);
    test([0, 500], [1, 1, 10, 10]);
    test([0, 500], [10, 10]);
    test([0, 500], [3, 13]);
    test([0, 500], [0, 500]);
    test([0, 500], [100, 2000]);
    test([0, 500], [100, 100, 2000, 2000]);
    test([100, 2000], [0, 0]);
    test([100, 2000], [0, 1]);
    test([100, 2000], [1, 1], false);
    test([100, 2000], [0, 10]);
    test([100, 2000], [0, 0, 10, 10]);
    test([100, 2000], [1, 10], false);
    test([100, 2000], [1, 1, 10, 10], false);
    test([100, 2000], [10, 10], false);
    test([100, 2000], [3, 13], false);
    test([100, 2000], [0, 500]);
    test([100, 2000], [100, 2000], false);
    test([100, 2000], [100, 100, 2000, 2000], false);
    test([100, 100, 2000, 2000], [0, 0]);
    test([100, 100, 2000, 2000], [0, 1]);
    test([100, 100, 2000, 2000], [1, 1], false);
    test([100, 100, 2000, 2000], [0, 10]);
    test([100, 100, 2000, 2000], [0, 0, 10, 10]);
    test([100, 100, 2000, 2000], [1, 10], false);
    test([100, 100, 2000, 2000], [1, 1, 10, 10], false);
    test([100, 100, 2000, 2000], [10, 10], false);
    test([100, 100, 2000, 2000], [3, 13], false);
    test([100, 100, 2000, 2000], [0, 500]);
    test([100, 100, 2000, 2000], [100, 2000], false);
    test([100, 100, 2000, 2000], [100, 100, 2000, 2000], false);
  });
});

